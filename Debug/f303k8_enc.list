
f303k8_enc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c6c  08003c6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c6c  08003c6c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c6c  08003c6c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c6c  08003c6c  00013c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c70  08003c70  00013c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  2000000c  08003c80  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003c80  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be3e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a2f  00000000  00000000  0002be7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  0002d8b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002e520  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a7f2  00000000  00000000  0002f0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a115  00000000  00000000  000498da  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a090c  00000000  00000000  000539ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f42fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003478  00000000  00000000  000f4378  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c0c 	.word	0x08003c0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003c0c 	.word	0x08003c0c

080001c8 <uart_putc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_putc(uint8_t c) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
	char buf[1];
	buf[0] = c;
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buf, sizeof(buf), 0xFFFF);
 80001d6:	f107 010c 	add.w	r1, r7, #12
 80001da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001de:	2201      	movs	r2, #1
 80001e0:	4803      	ldr	r0, [pc, #12]	; (80001f0 <uart_putc+0x28>)
 80001e2:	f003 f9b3 	bl	800354c <HAL_UART_Transmit>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	200001ac 	.word	0x200001ac

080001f4 <Count2rpm>:
TIM_Encoder_InitTypeDef sConfig3 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig1 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig2 = { 0 };
TIM_MasterConfigTypeDef sMasterConfig3 = { 0 };
int32_t rpm[3] = { 0 };
void Count2rpm() {
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0
	rpm[0] =TIM1->CNT - 30000;
 80001f8:	4b15      	ldr	r3, [pc, #84]	; (8000250 <Count2rpm+0x5c>)
 80001fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80001fc:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000200:	3b30      	subs	r3, #48	; 0x30
 8000202:	461a      	mov	r2, r3
 8000204:	4b13      	ldr	r3, [pc, #76]	; (8000254 <Count2rpm+0x60>)
 8000206:	601a      	str	r2, [r3, #0]
	rpm[1] =TIM2->CNT - 30000;
 8000208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800020e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000212:	3b30      	subs	r3, #48	; 0x30
 8000214:	461a      	mov	r2, r3
 8000216:	4b0f      	ldr	r3, [pc, #60]	; (8000254 <Count2rpm+0x60>)
 8000218:	605a      	str	r2, [r3, #4]
	rpm[2] =TIM3->CNT - 30000;
 800021a:	4b0f      	ldr	r3, [pc, #60]	; (8000258 <Count2rpm+0x64>)
 800021c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800021e:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8000222:	3b30      	subs	r3, #48	; 0x30
 8000224:	461a      	mov	r2, r3
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <Count2rpm+0x60>)
 8000228:	609a      	str	r2, [r3, #8]
	TIM1->CNT = 30000;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <Count2rpm+0x5c>)
 800022c:	f247 5230 	movw	r2, #30000	; 0x7530
 8000230:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 30000;
 8000232:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000236:	f247 5230 	movw	r2, #30000	; 0x7530
 800023a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 30000;
 800023c:	4b06      	ldr	r3, [pc, #24]	; (8000258 <Count2rpm+0x64>)
 800023e:	f247 5230 	movw	r2, #30000	; 0x7530
 8000242:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40012c00 	.word	0x40012c00
 8000254:	200000b8 	.word	0x200000b8
 8000258:	40000400 	.word	0x40000400

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	xdev_out(uart_putc);
 8000260:	4b2d      	ldr	r3, [pc, #180]	; (8000318 <main+0xbc>)
 8000262:	4a2e      	ldr	r2, [pc, #184]	; (800031c <main+0xc0>)
 8000264:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 ff1f 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f871 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 fb0d 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000272:	f000 fadb 	bl	800082c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000276:	f000 f8c9 	bl	800040c <MX_TIM1_Init>
  MX_TIM2_Init();
 800027a:	f000 f971 	bl	8000560 <MX_TIM2_Init>
  MX_TIM3_Init();
 800027e:	f000 fa0f 	bl	80006a0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8000282:	f000 faad 	bl	80007e0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 8000286:	4926      	ldr	r1, [pc, #152]	; (8000320 <main+0xc4>)
 8000288:	4826      	ldr	r0, [pc, #152]	; (8000324 <main+0xc8>)
 800028a:	f002 fd63 	bl	8002d54 <HAL_TIM_Encoder_Init>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <main+0x3c>
		Error_Handler();
 8000294:	f000 fb44 	bl	8000920 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000298:	213c      	movs	r1, #60	; 0x3c
 800029a:	4822      	ldr	r0, [pc, #136]	; (8000324 <main+0xc8>)
 800029c:	f002 fe00 	bl	8002ea0 <HAL_TIM_Encoder_Start>
	TIM1->CNT = 30000;
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <main+0xcc>)
 80002a2:	f247 5230 	movw	r2, #30000	; 0x7530
 80002a6:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 80002a8:	4920      	ldr	r1, [pc, #128]	; (800032c <main+0xd0>)
 80002aa:	4821      	ldr	r0, [pc, #132]	; (8000330 <main+0xd4>)
 80002ac:	f002 fd52 	bl	8002d54 <HAL_TIM_Encoder_Init>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <main+0x5e>
		Error_Handler();
 80002b6:	f000 fb33 	bl	8000920 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80002ba:	213c      	movs	r1, #60	; 0x3c
 80002bc:	481c      	ldr	r0, [pc, #112]	; (8000330 <main+0xd4>)
 80002be:	f002 fdef 	bl	8002ea0 <HAL_TIM_Encoder_Start>
	TIM2->CNT = 30000;
 80002c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002c6:	f247 5230 	movw	r2, #30000	; 0x7530
 80002ca:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 80002cc:	4919      	ldr	r1, [pc, #100]	; (8000334 <main+0xd8>)
 80002ce:	481a      	ldr	r0, [pc, #104]	; (8000338 <main+0xdc>)
 80002d0:	f002 fd40 	bl	8002d54 <HAL_TIM_Encoder_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <main+0x82>
		Error_Handler();
 80002da:	f000 fb21 	bl	8000920 <Error_Handler>
	}
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80002de:	213c      	movs	r1, #60	; 0x3c
 80002e0:	4815      	ldr	r0, [pc, #84]	; (8000338 <main+0xdc>)
 80002e2:	f002 fddd 	bl	8002ea0 <HAL_TIM_Encoder_Start>
	TIM3->CNT = 30000;
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <main+0xe0>)
 80002e8:	f247 5230 	movw	r2, #30000	; 0x7530
 80002ec:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim16);
 80002ee:	4814      	ldr	r0, [pc, #80]	; (8000340 <main+0xe4>)
 80002f0:	f002 fcd4 	bl	8002c9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80002f4:	2108      	movs	r1, #8
 80002f6:	4813      	ldr	r0, [pc, #76]	; (8000344 <main+0xe8>)
 80002f8:	f001 f9fa 	bl	80016f0 <HAL_GPIO_TogglePin>
		//xprintf("test\r\n");
		xprintf("%d\t,%d\t,%d\r\n", rpm[0], rpm[1], rpm[2]);
 80002fc:	4b12      	ldr	r3, [pc, #72]	; (8000348 <main+0xec>)
 80002fe:	6819      	ldr	r1, [r3, #0]
 8000300:	4b11      	ldr	r3, [pc, #68]	; (8000348 <main+0xec>)
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <main+0xec>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4810      	ldr	r0, [pc, #64]	; (800034c <main+0xf0>)
 800030a:	f000 fe91 	bl	8001030 <xprintf>
//		xprintf("%d\t,%d\t,%d\r\n", TIM1->CNT, TIM2->CNT, TIM3->CNT);
		HAL_Delay(100);
 800030e:	2064      	movs	r0, #100	; 0x64
 8000310:	f000 ff30 	bl	8001174 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000314:	e7ee      	b.n	80002f4 <main+0x98>
 8000316:	bf00      	nop
 8000318:	20000280 	.word	0x20000280
 800031c:	080001c9 	.word	0x080001c9
 8000320:	20000028 	.word	0x20000028
 8000324:	20000114 	.word	0x20000114
 8000328:	40012c00 	.word	0x40012c00
 800032c:	2000004c 	.word	0x2000004c
 8000330:	20000160 	.word	0x20000160
 8000334:	20000070 	.word	0x20000070
 8000338:	200000c8 	.word	0x200000c8
 800033c:	40000400 	.word	0x40000400
 8000340:	20000230 	.word	0x20000230
 8000344:	48000400 	.word	0x48000400
 8000348:	200000b8 	.word	0x200000b8
 800034c:	08003c24 	.word	0x08003c24

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b096      	sub	sp, #88	; 0x58
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800035a:	2228      	movs	r2, #40	; 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f003 fc4c 	bl	8003bfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 031c 	add.w	r3, r7, #28
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	1d3b      	adds	r3, r7, #4
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
 800037a:	605a      	str	r2, [r3, #4]
 800037c:	609a      	str	r2, [r3, #8]
 800037e:	60da      	str	r2, [r3, #12]
 8000380:	611a      	str	r2, [r3, #16]
 8000382:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000384:	2301      	movs	r3, #1
 8000386:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000388:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800038c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038e:	2300      	movs	r3, #0
 8000390:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000392:	2301      	movs	r3, #1
 8000394:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800039e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003aa:	4618      	mov	r0, r3
 80003ac:	f001 f9ba 	bl	8001724 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003b6:	f000 fab3 	bl	8000920 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2302      	movs	r3, #2
 80003c0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d0:	f107 031c 	add.w	r3, r7, #28
 80003d4:	2102      	movs	r1, #2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 f8ac 	bl	8002534 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003e2:	f000 fa9d 	bl	8000920 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80003e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003ec:	2300      	movs	r3, #0
 80003ee:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f0:	1d3b      	adds	r3, r7, #4
 80003f2:	4618      	mov	r0, r3
 80003f4:	f002 fad4 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 80003f8:	4603      	mov	r3, r0
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d001      	beq.n	8000402 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80003fe:	f000 fa8f 	bl	8000920 <Error_Handler>
  }
}
 8000402:	bf00      	nop
 8000404:	3758      	adds	r7, #88	; 0x58
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2224      	movs	r2, #36	; 0x24
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f003 fbee 	bl	8003bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */
	htim1.Instance = TIM1;
 800042a:	4b49      	ldr	r3, [pc, #292]	; (8000550 <MX_TIM1_Init+0x144>)
 800042c:	4a49      	ldr	r2, [pc, #292]	; (8000554 <MX_TIM1_Init+0x148>)
 800042e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000430:	4b47      	ldr	r3, [pc, #284]	; (8000550 <MX_TIM1_Init+0x144>)
 8000432:	2200      	movs	r2, #0
 8000434:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000436:	4b46      	ldr	r3, [pc, #280]	; (8000550 <MX_TIM1_Init+0x144>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800043c:	4b44      	ldr	r3, [pc, #272]	; (8000550 <MX_TIM1_Init+0x144>)
 800043e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000442:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000444:	4b42      	ldr	r3, [pc, #264]	; (8000550 <MX_TIM1_Init+0x144>)
 8000446:	2200      	movs	r2, #0
 8000448:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800044a:	4b41      	ldr	r3, [pc, #260]	; (8000550 <MX_TIM1_Init+0x144>)
 800044c:	2200      	movs	r2, #0
 800044e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000450:	4b3f      	ldr	r3, [pc, #252]	; (8000550 <MX_TIM1_Init+0x144>)
 8000452:	2200      	movs	r2, #0
 8000454:	619a      	str	r2, [r3, #24]
	sConfig1.EncoderMode = TIM_ENCODERMODE_TI1;
 8000456:	4b40      	ldr	r3, [pc, #256]	; (8000558 <MX_TIM1_Init+0x14c>)
 8000458:	2201      	movs	r2, #1
 800045a:	601a      	str	r2, [r3, #0]
	sConfig1.IC1Polarity = TIM_ICPOLARITY_RISING;
 800045c:	4b3e      	ldr	r3, [pc, #248]	; (8000558 <MX_TIM1_Init+0x14c>)
 800045e:	2200      	movs	r2, #0
 8000460:	605a      	str	r2, [r3, #4]
	sConfig1.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000462:	4b3d      	ldr	r3, [pc, #244]	; (8000558 <MX_TIM1_Init+0x14c>)
 8000464:	2201      	movs	r2, #1
 8000466:	609a      	str	r2, [r3, #8]
	sConfig1.IC1Prescaler = TIM_ICPSC_DIV1;
 8000468:	4b3b      	ldr	r3, [pc, #236]	; (8000558 <MX_TIM1_Init+0x14c>)
 800046a:	2200      	movs	r2, #0
 800046c:	60da      	str	r2, [r3, #12]
	sConfig1.IC1Filter = 0;
 800046e:	4b3a      	ldr	r3, [pc, #232]	; (8000558 <MX_TIM1_Init+0x14c>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
	sConfig1.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <MX_TIM1_Init+0x14c>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
	sConfig1.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <MX_TIM1_Init+0x14c>)
 800047c:	2201      	movs	r2, #1
 800047e:	619a      	str	r2, [r3, #24]
	sConfig1.IC2Prescaler = TIM_ICPSC_DIV1;
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <MX_TIM1_Init+0x14c>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
	sConfig1.IC2Filter = 0;
 8000486:	4b34      	ldr	r3, [pc, #208]	; (8000558 <MX_TIM1_Init+0x14c>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig1) != HAL_OK) {
 800048c:	4932      	ldr	r1, [pc, #200]	; (8000558 <MX_TIM1_Init+0x14c>)
 800048e:	4830      	ldr	r0, [pc, #192]	; (8000550 <MX_TIM1_Init+0x144>)
 8000490:	f002 fc60 	bl	8002d54 <HAL_TIM_Encoder_Init>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <MX_TIM1_Init+0x92>
		Error_Handler();
 800049a:	f000 fa41 	bl	8000920 <Error_Handler>
	}
	sMasterConfig1.MasterOutputTrigger = TIM_TRGO_RESET;
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <MX_TIM1_Init+0x150>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
	sMasterConfig1.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004a4:	4b2d      	ldr	r3, [pc, #180]	; (800055c <MX_TIM1_Init+0x150>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
	sMasterConfig1.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004aa:	4b2c      	ldr	r3, [pc, #176]	; (800055c <MX_TIM1_Init+0x150>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig1)
 80004b0:	492a      	ldr	r1, [pc, #168]	; (800055c <MX_TIM1_Init+0x150>)
 80004b2:	4827      	ldr	r0, [pc, #156]	; (8000550 <MX_TIM1_Init+0x144>)
 80004b4:	f002 ff70 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0xb6>
			!= HAL_OK) {
		Error_Handler();
 80004be:	f000 fa2f 	bl	8000920 <Error_Handler>
	}

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004c2:	4b23      	ldr	r3, [pc, #140]	; (8000550 <MX_TIM1_Init+0x144>)
 80004c4:	4a23      	ldr	r2, [pc, #140]	; (8000554 <MX_TIM1_Init+0x148>)
 80004c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <MX_TIM1_Init+0x144>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ce:	4b20      	ldr	r3, [pc, #128]	; (8000550 <MX_TIM1_Init+0x144>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MX_TIM1_Init+0x144>)
 80004d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004dc:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <MX_TIM1_Init+0x144>)
 80004de:	2200      	movs	r2, #0
 80004e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_TIM1_Init+0x144>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004e8:	4b19      	ldr	r3, [pc, #100]	; (8000550 <MX_TIM1_Init+0x144>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004f2:	2300      	movs	r3, #0
 80004f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004f6:	2301      	movs	r3, #1
 80004f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000502:	2300      	movs	r3, #0
 8000504:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000506:	2301      	movs	r3, #1
 8000508:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000512:	f107 030c 	add.w	r3, r7, #12
 8000516:	4619      	mov	r1, r3
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <MX_TIM1_Init+0x144>)
 800051a:	f002 fc1b 	bl	8002d54 <HAL_TIM_Encoder_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000524:	f000 f9fc 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000528:	2300      	movs	r3, #0
 800052a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_TIM1_Init+0x144>)
 800053a:	f002 ff2d 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8000544:	f000 f9ec 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3730      	adds	r7, #48	; 0x30
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000114 	.word	0x20000114
 8000554:	40012c00 	.word	0x40012c00
 8000558:	20000028 	.word	0x20000028
 800055c:	20000094 	.word	0x20000094

08000560 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2224      	movs	r2, #36	; 0x24
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fb44 	bl	8003bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
	htim2.Instance = TIM2;
 800057e:	4b45      	ldr	r3, [pc, #276]	; (8000694 <MX_TIM2_Init+0x134>)
 8000580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000584:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000586:	4b43      	ldr	r3, [pc, #268]	; (8000694 <MX_TIM2_Init+0x134>)
 8000588:	2200      	movs	r2, #0
 800058a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058c:	4b41      	ldr	r3, [pc, #260]	; (8000694 <MX_TIM2_Init+0x134>)
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <MX_TIM2_Init+0x134>)
 8000594:	f04f 32ff 	mov.w	r2, #4294967295
 8000598:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800059a:	4b3e      	ldr	r3, [pc, #248]	; (8000694 <MX_TIM2_Init+0x134>)
 800059c:	2200      	movs	r2, #0
 800059e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005a0:	4b3c      	ldr	r3, [pc, #240]	; (8000694 <MX_TIM2_Init+0x134>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	619a      	str	r2, [r3, #24]
	sConfig2.EncoderMode = TIM_ENCODERMODE_TI1;
 80005a6:	4b3c      	ldr	r3, [pc, #240]	; (8000698 <MX_TIM2_Init+0x138>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
	sConfig2.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005ac:	4b3a      	ldr	r3, [pc, #232]	; (8000698 <MX_TIM2_Init+0x138>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	605a      	str	r2, [r3, #4]
	sConfig2.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <MX_TIM2_Init+0x138>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	609a      	str	r2, [r3, #8]
	sConfig2.IC1Prescaler = TIM_ICPSC_DIV1;
 80005b8:	4b37      	ldr	r3, [pc, #220]	; (8000698 <MX_TIM2_Init+0x138>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
	sConfig2.IC1Filter = 0;
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <MX_TIM2_Init+0x138>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
	sConfig2.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005c4:	4b34      	ldr	r3, [pc, #208]	; (8000698 <MX_TIM2_Init+0x138>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	615a      	str	r2, [r3, #20]
	sConfig2.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005ca:	4b33      	ldr	r3, [pc, #204]	; (8000698 <MX_TIM2_Init+0x138>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	619a      	str	r2, [r3, #24]
	sConfig2.IC2Prescaler = TIM_ICPSC_DIV1;
 80005d0:	4b31      	ldr	r3, [pc, #196]	; (8000698 <MX_TIM2_Init+0x138>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
	sConfig2.IC2Filter = 0;
 80005d6:	4b30      	ldr	r3, [pc, #192]	; (8000698 <MX_TIM2_Init+0x138>)
 80005d8:	2200      	movs	r2, #0
 80005da:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig2) != HAL_OK) {
 80005dc:	492e      	ldr	r1, [pc, #184]	; (8000698 <MX_TIM2_Init+0x138>)
 80005de:	482d      	ldr	r0, [pc, #180]	; (8000694 <MX_TIM2_Init+0x134>)
 80005e0:	f002 fbb8 	bl	8002d54 <HAL_TIM_Encoder_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM2_Init+0x8e>
		Error_Handler();
 80005ea:	f000 f999 	bl	8000920 <Error_Handler>
	}
	sMasterConfig2.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ee:	4b2b      	ldr	r3, [pc, #172]	; (800069c <MX_TIM2_Init+0x13c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
	sMasterConfig2.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f4:	4b29      	ldr	r3, [pc, #164]	; (800069c <MX_TIM2_Init+0x13c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig2)
 80005fa:	4928      	ldr	r1, [pc, #160]	; (800069c <MX_TIM2_Init+0x13c>)
 80005fc:	4825      	ldr	r0, [pc, #148]	; (8000694 <MX_TIM2_Init+0x134>)
 80005fe:	f002 fecb 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8000608:	f000 f98a 	bl	8000920 <Error_Handler>
	}

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800060c:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_TIM2_Init+0x134>)
 800060e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_TIM2_Init+0x134>)
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_TIM2_Init+0x134>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_TIM2_Init+0x134>)
 8000622:	f04f 32ff 	mov.w	r2, #4294967295
 8000626:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_TIM2_Init+0x134>)
 800062a:	2200      	movs	r2, #0
 800062c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_TIM2_Init+0x134>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000634:	2301      	movs	r3, #1
 8000636:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800063c:	2301      	movs	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000648:	2300      	movs	r3, #0
 800064a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800064c:	2301      	movs	r3, #1
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	4619      	mov	r1, r3
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_TIM2_Init+0x134>)
 8000660:	f002 fb78 	bl	8002d54 <HAL_TIM_Encoder_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 800066a:	f000 f959 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000672:	2300      	movs	r3, #0
 8000674:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000676:	463b      	mov	r3, r7
 8000678:	4619      	mov	r1, r3
 800067a:	4806      	ldr	r0, [pc, #24]	; (8000694 <MX_TIM2_Init+0x134>)
 800067c:	f002 fe8c 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
 8000686:	f000 f94b 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800068a:	bf00      	nop
 800068c:	3730      	adds	r7, #48	; 0x30
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000160 	.word	0x20000160
 8000698:	2000004c 	.word	0x2000004c
 800069c:	200000a0 	.word	0x200000a0

080006a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08c      	sub	sp, #48	; 0x30
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2224      	movs	r2, #36	; 0x24
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 faa4 	bl	8003bfc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006b4:	463b      	mov	r3, r7
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

	htim3.Instance = TIM3;
 80006be:	4b44      	ldr	r3, [pc, #272]	; (80007d0 <MX_TIM3_Init+0x130>)
 80006c0:	4a44      	ldr	r2, [pc, #272]	; (80007d4 <MX_TIM3_Init+0x134>)
 80006c2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80006c4:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <MX_TIM3_Init+0x130>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <MX_TIM3_Init+0x130>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80006d0:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <MX_TIM3_Init+0x130>)
 80006d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006d6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b3d      	ldr	r3, [pc, #244]	; (80007d0 <MX_TIM3_Init+0x130>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b3c      	ldr	r3, [pc, #240]	; (80007d0 <MX_TIM3_Init+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
	sConfig3.EncoderMode = TIM_ENCODERMODE_TI1;
 80006e4:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <MX_TIM3_Init+0x138>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	601a      	str	r2, [r3, #0]
	sConfig3.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006ea:	4b3b      	ldr	r3, [pc, #236]	; (80007d8 <MX_TIM3_Init+0x138>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
	sConfig3.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006f0:	4b39      	ldr	r3, [pc, #228]	; (80007d8 <MX_TIM3_Init+0x138>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	609a      	str	r2, [r3, #8]
	sConfig3.IC1Prescaler = TIM_ICPSC_DIV1;
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <MX_TIM3_Init+0x138>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
	sConfig3.IC1Filter = 0;
 80006fc:	4b36      	ldr	r3, [pc, #216]	; (80007d8 <MX_TIM3_Init+0x138>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
	sConfig3.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000702:	4b35      	ldr	r3, [pc, #212]	; (80007d8 <MX_TIM3_Init+0x138>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
	sConfig3.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000708:	4b33      	ldr	r3, [pc, #204]	; (80007d8 <MX_TIM3_Init+0x138>)
 800070a:	2201      	movs	r2, #1
 800070c:	619a      	str	r2, [r3, #24]
	sConfig3.IC2Prescaler = TIM_ICPSC_DIV1;
 800070e:	4b32      	ldr	r3, [pc, #200]	; (80007d8 <MX_TIM3_Init+0x138>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
	sConfig3.IC2Filter = 0;
 8000714:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <MX_TIM3_Init+0x138>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig3) != HAL_OK) {
 800071a:	492f      	ldr	r1, [pc, #188]	; (80007d8 <MX_TIM3_Init+0x138>)
 800071c:	482c      	ldr	r0, [pc, #176]	; (80007d0 <MX_TIM3_Init+0x130>)
 800071e:	f002 fb19 	bl	8002d54 <HAL_TIM_Encoder_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x8c>
		Error_Handler();
 8000728:	f000 f8fa 	bl	8000920 <Error_Handler>
	}
	sMasterConfig3.MasterOutputTrigger = TIM_TRGO_RESET;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_TIM3_Init+0x13c>)
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
	sMasterConfig3.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_TIM3_Init+0x13c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig3)
 8000738:	4928      	ldr	r1, [pc, #160]	; (80007dc <MX_TIM3_Init+0x13c>)
 800073a:	4825      	ldr	r0, [pc, #148]	; (80007d0 <MX_TIM3_Init+0x130>)
 800073c:	f002 fe2c 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM3_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 8000746:	f000 f8eb 	bl	8000920 <Error_Handler>
	}
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_TIM3_Init+0x130>)
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <MX_TIM3_Init+0x134>)
 800074e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_TIM3_Init+0x130>)
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b1e      	ldr	r3, [pc, #120]	; (80007d0 <MX_TIM3_Init+0x130>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800075c:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_TIM3_Init+0x130>)
 800075e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000762:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_TIM3_Init+0x130>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_TIM3_Init+0x130>)
 800076c:	2200      	movs	r2, #0
 800076e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000770:	2301      	movs	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000774:	2300      	movs	r3, #0
 8000776:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000778:	2301      	movs	r3, #1
 800077a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000788:	2301      	movs	r3, #1
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_TIM3_Init+0x130>)
 800079c:	f002 fada 	bl	8002d54 <HAL_TIM_Encoder_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM3_Init+0x10a>
  {
    Error_Handler();
 80007a6:	f000 f8bb 	bl	8000920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007b2:	463b      	mov	r3, r7
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_TIM3_Init+0x130>)
 80007b8:	f002 fdee 	bl	8003398 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM3_Init+0x126>
  {
    Error_Handler();
 80007c2:	f000 f8ad 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	3730      	adds	r7, #48	; 0x30
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000c8 	.word	0x200000c8
 80007d4:	40000400 	.word	0x40000400
 80007d8:	20000070 	.word	0x20000070
 80007dc:	200000ac 	.word	0x200000ac

080007e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80007e4:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_TIM16_Init+0x44>)
 80007e6:	4a10      	ldr	r2, [pc, #64]	; (8000828 <MX_TIM16_Init+0x48>)
 80007e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 99;
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <MX_TIM16_Init+0x44>)
 80007ec:	2263      	movs	r2, #99	; 0x63
 80007ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <MX_TIM16_Init+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 7200;
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <MX_TIM16_Init+0x44>)
 80007f8:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80007fc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <MX_TIM16_Init+0x44>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000804:	4b07      	ldr	r3, [pc, #28]	; (8000824 <MX_TIM16_Init+0x44>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <MX_TIM16_Init+0x44>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <MX_TIM16_Init+0x44>)
 8000812:	f002 f9eb 	bl	8002bec <HAL_TIM_Base_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800081c:	f000 f880 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000230 	.word	0x20000230
 8000828:	40014400 	.word	0x40014400

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000832:	4a15      	ldr	r2, [pc, #84]	; (8000888 <MX_USART2_UART_Init+0x5c>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_UART_Init+0x58>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x58>)
 8000870:	f002 fe1e 	bl	80034b0 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800087a:	f000 f851 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	200001ac 	.word	0x200001ac
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_GPIO_Init+0x8c>)
 80008e0:	695b      	ldr	r3, [r3, #20]
 80008e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2108      	movs	r1, #8
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0x90>)
 80008f0:	f000 fee6 	bl	80016c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008f4:	2308      	movs	r3, #8
 80008f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f8:	2301      	movs	r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0x90>)
 800090c:	f000 fd66 	bl	80013dc <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3720      	adds	r7, #32
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	48000400 	.word	0x48000400

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
	...

08000930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_MspInit+0x44>)
 8000938:	699b      	ldr	r3, [r3, #24]
 800093a:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <HAL_MspInit+0x44>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_MspInit+0x44>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_MspInit+0x44>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	4a08      	ldr	r2, [pc, #32]	; (8000974 <HAL_MspInit+0x44>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	61d3      	str	r3, [r2, #28]
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_MspInit+0x44>)
 800095c:	69db      	ldr	r3, [r3, #28]
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000

08000978 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08e      	sub	sp, #56	; 0x38
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a4b      	ldr	r2, [pc, #300]	; (8000ac4 <HAL_TIM_Encoder_MspInit+0x14c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d132      	bne.n	8000a00 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b4b      	ldr	r3, [pc, #300]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a4a      	ldr	r2, [pc, #296]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b48      	ldr	r3, [pc, #288]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	623b      	str	r3, [r7, #32]
 80009b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 80009b4:	695b      	ldr	r3, [r3, #20]
 80009b6:	4a44      	ldr	r2, [pc, #272]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 80009b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009bc:	6153      	str	r3, [r2, #20]
 80009be:	4b42      	ldr	r3, [pc, #264]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	61fb      	str	r3, [r7, #28]
 80009c8:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009dc:	2306      	movs	r3, #6
 80009de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fcf7 	bl	80013dc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2019      	movs	r0, #25
 80009f4:	f000 fcbb 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80009f8:	2019      	movs	r0, #25
 80009fa:	f000 fcd4 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009fe:	e05c      	b.n	8000aba <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a08:	d129      	bne.n	8000a5e <HAL_TIM_Encoder_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a0c:	69db      	ldr	r3, [r3, #28]
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	61d3      	str	r3, [r2, #28]
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
 8000a20:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6153      	str	r3, [r2, #20]
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fcc0 	bl	80013dc <HAL_GPIO_Init>
}
 8000a5c:	e02d      	b.n	8000aba <HAL_TIM_Encoder_MspInit+0x142>
  else if(htim_encoder->Instance==TIM3)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <HAL_TIM_Encoder_MspInit+0x154>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d128      	bne.n	8000aba <HAL_TIM_Encoder_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a6a:	69db      	ldr	r3, [r3, #28]
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a6e:	f043 0302 	orr.w	r3, r3, #2
 8000a72:	61d3      	str	r3, [r2, #28]
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a76:	69db      	ldr	r3, [r3, #28]
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a80:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	4a10      	ldr	r2, [pc, #64]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8a:	6153      	str	r3, [r2, #20]
 8000a8c:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <HAL_TIM_Encoder_MspInit+0x150>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000a98:	2350      	movs	r3, #80	; 0x50
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab6:	f000 fc91 	bl	80013dc <HAL_GPIO_Init>
}
 8000aba:	bf00      	nop
 8000abc:	3738      	adds	r7, #56	; 0x38
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40012c00 	.word	0x40012c00
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40000400 	.word	0x40000400

08000ad0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <HAL_TIM_Base_MspInit+0x44>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d113      	bne.n	8000b0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000ae2:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <HAL_TIM_Base_MspInit+0x48>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <HAL_TIM_Base_MspInit+0x48>)
 8000ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aec:	6193      	str	r3, [r2, #24]
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_TIM_Base_MspInit+0x48>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	2019      	movs	r0, #25
 8000b00:	f000 fc35 	bl	800136e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b04:	2019      	movs	r0, #25
 8000b06:	f000 fc4e 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3710      	adds	r7, #16
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40014400 	.word	0x40014400
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a18      	ldr	r2, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x80>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d129      	bne.n	8000b92 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	61d3      	str	r3, [r2, #28]
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b4c:	69db      	ldr	r3, [r3, #28]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b60:	6153      	str	r3, [r2, #20]
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b6e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b80:	2307      	movs	r3, #7
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f000 fc25 	bl	80013dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	40021000 	.word	0x40021000

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 fa9c 	bl	8001134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000c06:	f002 f9d8 	bl	8002fba <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000c0a:	4804      	ldr	r0, [pc, #16]	; (8000c1c <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8000c0c:	f002 f9d5 	bl	8002fba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	Count2rpm();
 8000c10:	f7ff faf0 	bl	80001f4 <Count2rpm>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000114 	.word	0x20000114
 8000c1c:	20000230 	.word	0x20000230

08000c20 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <SystemInit+0x20>)
 8000c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <SystemInit+0x20>)
 8000c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b0a      	cmp	r3, #10
 8000c52:	d102      	bne.n	8000c5a <xputc+0x16>
 8000c54:	200d      	movs	r0, #13
 8000c56:	f7ff fff5 	bl	8000c44 <xputc>

	if (outptr) {		/* Destination is memory */
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <xputc+0x48>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d007      	beq.n	8000c72 <xputc+0x2e>
		*outptr++ = (unsigned char)c;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <xputc+0x48>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	4908      	ldr	r1, [pc, #32]	; (8000c8c <xputc+0x48>)
 8000c6a:	600a      	str	r2, [r1, #0]
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	701a      	strb	r2, [r3, #0]
		return;
 8000c70:	e008      	b.n	8000c84 <xputc+0x40>
	}
	if (xfunc_out) {	/* Destination is device */
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <xputc+0x4c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d004      	beq.n	8000c84 <xputc+0x40>
		xfunc_out((unsigned char)c);
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <xputc+0x4c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	79fa      	ldrb	r2, [r7, #7]
 8000c80:	4610      	mov	r0, r2
 8000c82:	4798      	blx	r3
	}
}
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200000c4 	.word	0x200000c4
 8000c90:	20000280 	.word	0x20000280

08000c94 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000c9c:	e006      	b.n	8000cac <xputs+0x18>
		xputc(*str++);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ffcc 	bl	8000c44 <xputc>
	while (*str) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f4      	bne.n	8000c9e <xputs+0xa>
	}
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
	unsigned long vs;
#endif


	for (;;) {
		c = *fmt++;					/* Get a format character */
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	1c5a      	adds	r2, r3, #1
 8000cca:	607a      	str	r2, [r7, #4]
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!c) break;				/* End of format? */
 8000cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 81a3 	beq.w	8001022 <xvprintf+0x366>
		if (c != '%') {				/* Pass it through if not a % sequense */
 8000cdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ce0:	2b25      	cmp	r3, #37	; 0x25
 8000ce2:	d005      	beq.n	8000cf0 <xvprintf+0x34>
			xputc(c); continue;
 8000ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffab 	bl	8000c44 <xputc>
 8000cee:	e197      	b.n	8001020 <xvprintf+0x364>
		}
		f = w = 0;					/* Clear parms */
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8000cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
		c = *fmt++;					/* Get first char of the sequense */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	1c5a      	adds	r2, r3, #1
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (c == '0') {				/* Flag: left '0' padded */
 8000d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d08:	2b30      	cmp	r3, #48	; 0x30
 8000d0a:	d108      	bne.n	8000d1e <xvprintf+0x62>
			f = 1; c = *fmt++;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1c5a      	adds	r2, r3, #1
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d1c:	e00b      	b.n	8000d36 <xvprintf+0x7a>
		} else {
			if (c == '-') {			/* Flag: left justified */
 8000d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d22:	2b2d      	cmp	r3, #45	; 0x2d
 8000d24:	d107      	bne.n	8000d36 <xvprintf+0x7a>
				f = 2; c = *fmt++;
 8000d26:	2302      	movs	r3, #2
 8000d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	1c5a      	adds	r2, r3, #1
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8000d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d3c:	d126      	bne.n	8000d8c <xvprintf+0xd0>
			n = va_arg(arp, int);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	1d1a      	adds	r2, r3, #4
 8000d42:	603a      	str	r2, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	63bb      	str	r3, [r7, #56]	; 0x38
			if (n < 0) {			/* Flag: left justified */
 8000d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da04      	bge.n	8000d58 <xvprintf+0x9c>
				n = 0 - n;
 8000d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d50:	425b      	negs	r3, r3
 8000d52:	63bb      	str	r3, [r7, #56]	; 0x38
				f = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			w = n; c = *fmt++;
 8000d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d68:	e018      	b.n	8000d9c <xvprintf+0xe0>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8000d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	461a      	mov	r2, r3
 8000d76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d7a:	4413      	add	r3, r2
 8000d7c:	3b30      	subs	r3, #48	; 0x30
 8000d7e:	643b      	str	r3, [r7, #64]	; 0x40
				c = *fmt++;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8000d8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d90:	2b2f      	cmp	r3, #47	; 0x2f
 8000d92:	d903      	bls.n	8000d9c <xvprintf+0xe0>
 8000d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d98:	2b39      	cmp	r3, #57	; 0x39
 8000d9a:	d9e6      	bls.n	8000d6a <xvprintf+0xae>
			}
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long */
 8000d9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da0:	2b6c      	cmp	r3, #108	; 0x6c
 8000da2:	d003      	beq.n	8000dac <xvprintf+0xf0>
 8000da4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000da8:	2b4c      	cmp	r3, #76	; 0x4c
 8000daa:	d109      	bne.n	8000dc0 <xvprintf+0x104>
			f |= 4; c = *fmt++;
 8000dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if (c == 'l' || c == 'L') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 8000dc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 812e 	beq.w	8001026 <xvprintf+0x36a>
		d = c;
 8000dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		if (d >= 'a') d -= 0x20;
 8000dd2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dd6:	2b60      	cmp	r3, #96	; 0x60
 8000dd8:	d904      	bls.n	8000de4 <xvprintf+0x128>
 8000dda:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dde:	3b20      	subs	r3, #32
 8000de0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		switch (d) {				/* Type is... */
 8000de4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000de8:	3b42      	subs	r3, #66	; 0x42
 8000dea:	2b16      	cmp	r3, #22
 8000dec:	d873      	bhi.n	8000ed6 <xvprintf+0x21a>
 8000dee:	a201      	add	r2, pc, #4	; (adr r2, 8000df4 <xvprintf+0x138>)
 8000df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000df4:	08000ebf 	.word	0x08000ebf
 8000df8:	08000ead 	.word	0x08000ead
 8000dfc:	08000ecb 	.word	0x08000ecb
 8000e00:	08000ed7 	.word	0x08000ed7
 8000e04:	08000ed7 	.word	0x08000ed7
 8000e08:	08000ed7 	.word	0x08000ed7
 8000e0c:	08000ed7 	.word	0x08000ed7
 8000e10:	08000ed7 	.word	0x08000ed7
 8000e14:	08000ed7 	.word	0x08000ed7
 8000e18:	08000ed7 	.word	0x08000ed7
 8000e1c:	08000ed7 	.word	0x08000ed7
 8000e20:	08000ed7 	.word	0x08000ed7
 8000e24:	08000ed7 	.word	0x08000ed7
 8000e28:	08000ec5 	.word	0x08000ec5
 8000e2c:	08000ed7 	.word	0x08000ed7
 8000e30:	08000ed7 	.word	0x08000ed7
 8000e34:	08000ed7 	.word	0x08000ed7
 8000e38:	08000e51 	.word	0x08000e51
 8000e3c:	08000ed7 	.word	0x08000ed7
 8000e40:	08000ecb 	.word	0x08000ecb
 8000e44:	08000ed7 	.word	0x08000ed7
 8000e48:	08000ed7 	.word	0x08000ed7
 8000e4c:	08000ed1 	.word	0x08000ed1
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	1d1a      	adds	r2, r3, #4
 8000e54:	603a      	str	r2, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	62bb      	str	r3, [r7, #40]	; 0x28
			for (j = 0; p[j]; j++) ;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	; 0x44
 8000e5e:	e002      	b.n	8000e66 <xvprintf+0x1aa>
 8000e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e62:	3301      	adds	r3, #1
 8000e64:	647b      	str	r3, [r7, #68]	; 0x44
 8000e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d1f6      	bne.n	8000e60 <xvprintf+0x1a4>
			while (!(f & 2) && j++ < w) xputc(' ');
 8000e72:	e002      	b.n	8000e7a <xvprintf+0x1be>
 8000e74:	2020      	movs	r0, #32
 8000e76:	f7ff fee5 	bl	8000c44 <xputc>
 8000e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7c:	f003 0302 	and.w	r3, r3, #2
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d105      	bne.n	8000e90 <xvprintf+0x1d4>
 8000e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	647a      	str	r2, [r7, #68]	; 0x44
 8000e8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d8f1      	bhi.n	8000e74 <xvprintf+0x1b8>
			xputs(p);
 8000e90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e92:	f7ff feff 	bl	8000c94 <xputs>
			while (j++ < w) xputc(' ');
 8000e96:	e002      	b.n	8000e9e <xvprintf+0x1e2>
 8000e98:	2020      	movs	r0, #32
 8000e9a:	f7ff fed3 	bl	8000c44 <xputc>
 8000e9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	647a      	str	r2, [r7, #68]	; 0x44
 8000ea4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d8f6      	bhi.n	8000e98 <xvprintf+0x1dc>
			continue;
 8000eaa:	e0b9      	b.n	8001020 <xvprintf+0x364>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	1d1a      	adds	r2, r3, #4
 8000eb0:	603a      	str	r2, [r7, #0]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fec4 	bl	8000c44 <xputc>
 8000ebc:	e0b0      	b.n	8001020 <xvprintf+0x364>
		case 'B' :					/* Binary */
			r = 2; break;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec2:	e00e      	b.n	8000ee2 <xvprintf+0x226>
		case 'O' :					/* Octal */
			r = 8; break;
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec8:	e00b      	b.n	8000ee2 <xvprintf+0x226>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 8000eca:	230a      	movs	r3, #10
 8000ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ece:	e008      	b.n	8000ee2 <xvprintf+0x226>
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ed4:	e005      	b.n	8000ee2 <xvprintf+0x226>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 8000ed6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff feb2 	bl	8000c44 <xputc>
 8000ee0:	e09e      	b.n	8001020 <xvprintf+0x364>
			} else {		/* int/short/char argument */
				v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8000ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d005      	beq.n	8000ef8 <xvprintf+0x23c>
			v = va_arg(arp, long);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	1d1a      	adds	r2, r3, #4
 8000ef0:	603a      	str	r2, [r7, #0]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
 8000ef6:	e00d      	b.n	8000f14 <xvprintf+0x258>
		} else {		/* int/short/char argument */
			v = (d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8000ef8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000efc:	2b44      	cmp	r3, #68	; 0x44
 8000efe:	d104      	bne.n	8000f0a <xvprintf+0x24e>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	1d1a      	adds	r2, r3, #4
 8000f04:	603a      	str	r2, [r7, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	e003      	b.n	8000f12 <xvprintf+0x256>
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	1d1a      	adds	r2, r3, #4
 8000f0e:	603a      	str	r2, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
		}
#endif
		if (d == 'D' && v < 0) {	/* Negative value? */
 8000f14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f18:	2b44      	cmp	r3, #68	; 0x44
 8000f1a:	d109      	bne.n	8000f30 <xvprintf+0x274>
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	da06      	bge.n	8000f30 <xvprintf+0x274>
			v = 0 - v; f |= 16;
 8000f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f24:	425b      	negs	r3, r3
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
 8000f28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f2a:	f043 0310 	orr.w	r3, r3, #16
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		i = 0; vs = v;
 8000f30:	2300      	movs	r3, #0
 8000f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
		do {
			d = (char)(vs % r); vs /= r;
 8000f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f40:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f42:	fb01 f202 	mul.w	r2, r1, r2
 8000f46:	1a9b      	subs	r3, r3, r2
 8000f48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8000f56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	d90b      	bls.n	8000f76 <xvprintf+0x2ba>
 8000f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000f62:	2b78      	cmp	r3, #120	; 0x78
 8000f64:	d101      	bne.n	8000f6a <xvprintf+0x2ae>
 8000f66:	2227      	movs	r2, #39	; 0x27
 8000f68:	e000      	b.n	8000f6c <xvprintf+0x2b0>
 8000f6a:	2207      	movs	r2, #7
 8000f6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000f70:	4413      	add	r3, r2
 8000f72:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			s[i++] = d + '0';
 8000f76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8000f7c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000f80:	3230      	adds	r2, #48	; 0x30
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000f88:	440b      	add	r3, r1
 8000f8a:	f803 2c48 	strb.w	r2, [r3, #-72]
		} while (vs != 0 && i < sizeof s);
 8000f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d002      	beq.n	8000f9a <xvprintf+0x2de>
 8000f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000f96:	2b1f      	cmp	r3, #31
 8000f98:	d9ce      	bls.n	8000f38 <xvprintf+0x27c>
		if (f & 16) s[i++] = '-';
 8000f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d008      	beq.n	8000fb6 <xvprintf+0x2fa>
 8000fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fa6:	1c5a      	adds	r2, r3, #1
 8000fa8:	64ba      	str	r2, [r7, #72]	; 0x48
 8000faa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000fae:	4413      	add	r3, r2
 8000fb0:	222d      	movs	r2, #45	; 0x2d
 8000fb2:	f803 2c48 	strb.w	r2, [r3, #-72]
		j = i; d = (f & 1) ? '0' : ' ';
 8000fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000fb8:	647b      	str	r3, [r7, #68]	; 0x44
 8000fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <xvprintf+0x30c>
 8000fc4:	2330      	movs	r3, #48	; 0x30
 8000fc6:	e000      	b.n	8000fca <xvprintf+0x30e>
 8000fc8:	2320      	movs	r3, #32
 8000fca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		while (!(f & 2) && j++ < w) xputc(d);
 8000fce:	e004      	b.n	8000fda <xvprintf+0x31e>
 8000fd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fe35 	bl	8000c44 <xputc>
 8000fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000fdc:	f003 0302 	and.w	r3, r3, #2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d105      	bne.n	8000ff0 <xvprintf+0x334>
 8000fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	647a      	str	r2, [r7, #68]	; 0x44
 8000fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d8ef      	bhi.n	8000fd0 <xvprintf+0x314>
		do xputc(s[--i]); while (i != 0);
 8000ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ff6:	f107 0208 	add.w	r2, r7, #8
 8000ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000ffc:	4413      	add	r3, r2
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fe1f 	bl	8000c44 <xputc>
 8001006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f1      	bne.n	8000ff0 <xvprintf+0x334>
		while (j++ < w) xputc(' ');
 800100c:	e002      	b.n	8001014 <xvprintf+0x358>
 800100e:	2020      	movs	r0, #32
 8001010:	f7ff fe18 	bl	8000c44 <xputc>
 8001014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001016:	1c5a      	adds	r2, r3, #1
 8001018:	647a      	str	r2, [r7, #68]	; 0x44
 800101a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800101c:	429a      	cmp	r2, r3
 800101e:	d8f6      	bhi.n	800100e <xvprintf+0x352>
		c = *fmt++;					/* Get a format character */
 8001020:	e651      	b.n	8000cc6 <xvprintf+0xa>
		if (!c) break;				/* End of format? */
 8001022:	bf00      	nop
 8001024:	e000      	b.n	8001028 <xvprintf+0x36c>
		if (!c) break;				/* End of format? */
 8001026:	bf00      	nop
	}
}
 8001028:	bf00      	nop
 800102a:	3750      	adds	r7, #80	; 0x50
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8001030:	b40f      	push	{r0, r1, r2, r3}
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	607b      	str	r3, [r7, #4]
	xvprintf(fmt, arp);
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	6938      	ldr	r0, [r7, #16]
 8001042:	f7ff fe3b 	bl	8000cbc <xvprintf>
	va_end(arp);
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001050:	b004      	add	sp, #16
 8001052:	4770      	bx	lr

08001054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800108c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0b      	ldr	r4, [pc, #44]	; (80010a0 <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800107e:	f7ff fdcf 	bl	8000c20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001082:	f002 fd97 	bl	8003bb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001086:	f7ff f8e9 	bl	800025c <main>

0800108a <LoopForever>:

LoopForever:
    b LoopForever
 800108a:	e7fe      	b.n	800108a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800108c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001094:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001098:	08003c74 	.word	0x08003c74
  ldr r2, =_sbss
 800109c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a0:	20000288 	.word	0x20000288

080010a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_2_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_Init+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_Init+0x28>)
 80010b2:	f043 0310 	orr.w	r3, r3, #16
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b8:	2003      	movs	r0, #3
 80010ba:	f000 f94d 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010be:	2000      	movs	r0, #0
 80010c0:	f000 f808 	bl	80010d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010c4:	f7ff fc34 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <HAL_InitTick+0x54>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <HAL_InitTick+0x58>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f965 	bl	80013c2 <HAL_SYSTICK_Config>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e00e      	b.n	8001120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2b0f      	cmp	r3, #15
 8001106:	d80a      	bhi.n	800111e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001108:	2200      	movs	r2, #0
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	f000 f92d 	bl	800136e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001114:	4a06      	ldr	r2, [pc, #24]	; (8001130 <HAL_InitTick+0x5c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	e000      	b.n	8001120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000000 	.word	0x20000000
 800112c:	20000008 	.word	0x20000008
 8001130:	20000004 	.word	0x20000004

08001134 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x20>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	461a      	mov	r2, r3
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_IncTick+0x24>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4413      	add	r3, r2
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_IncTick+0x24>)
 8001146:	6013      	str	r3, [r2, #0]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008
 8001158:	20000284 	.word	0x20000284

0800115c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001160:	4b03      	ldr	r3, [pc, #12]	; (8001170 <HAL_GetTick+0x14>)
 8001162:	681b      	ldr	r3, [r3, #0]
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000284 	.word	0x20000284

08001174 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff ffee 	bl	800115c <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_Delay+0x40>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffde 	bl	800115c <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000008 	.word	0x20000008

080011b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d4:	4013      	ands	r3, r2
 80011d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	; (80011fc <__NVIC_SetPriorityGrouping+0x44>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001204:	4b04      	ldr	r3, [pc, #16]	; (8001218 <__NVIC_GetPriorityGrouping+0x18>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	0a1b      	lsrs	r3, r3, #8
 800120a:	f003 0307 	and.w	r3, r3, #7
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	db0b      	blt.n	8001246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	f003 021f 	and.w	r2, r3, #31
 8001234:	4907      	ldr	r1, [pc, #28]	; (8001254 <__NVIC_EnableIRQ+0x38>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	095b      	lsrs	r3, r3, #5
 800123c:	2001      	movs	r0, #1
 800123e:	fa00 f202 	lsl.w	r2, r0, r2
 8001242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000e100 	.word	0xe000e100

08001258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	6039      	str	r1, [r7, #0]
 8001262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	2b00      	cmp	r3, #0
 800126a:	db0a      	blt.n	8001282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	490c      	ldr	r1, [pc, #48]	; (80012a4 <__NVIC_SetPriority+0x4c>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	0112      	lsls	r2, r2, #4
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	440b      	add	r3, r1
 800127c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001280:	e00a      	b.n	8001298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4908      	ldr	r1, [pc, #32]	; (80012a8 <__NVIC_SetPriority+0x50>)
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	f003 030f 	and.w	r3, r3, #15
 800128e:	3b04      	subs	r3, #4
 8001290:	0112      	lsls	r2, r2, #4
 8001292:	b2d2      	uxtb	r2, r2
 8001294:	440b      	add	r3, r1
 8001296:	761a      	strb	r2, [r3, #24]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000e100 	.word	0xe000e100
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b089      	sub	sp, #36	; 0x24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0307 	and.w	r3, r3, #7
 80012be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	f1c3 0307 	rsb	r3, r3, #7
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	bf28      	it	cs
 80012ca:	2304      	movcs	r3, #4
 80012cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	3304      	adds	r3, #4
 80012d2:	2b06      	cmp	r3, #6
 80012d4:	d902      	bls.n	80012dc <NVIC_EncodePriority+0x30>
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3b03      	subs	r3, #3
 80012da:	e000      	b.n	80012de <NVIC_EncodePriority+0x32>
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	f04f 32ff 	mov.w	r2, #4294967295
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	43da      	mvns	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43d9      	mvns	r1, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001304:	4313      	orrs	r3, r2
         );
}
 8001306:	4618      	mov	r0, r3
 8001308:	3724      	adds	r7, #36	; 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff8e 	bl	8001258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff29 	bl	80011b8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff3e 	bl	8001200 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff8e 	bl	80012ac <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5d 	bl	8001258 <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff31 	bl	800121c <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa2 	bl	8001314 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b480      	push	{r7}
 80013de:	b087      	sub	sp, #28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	e14e      	b.n	800168a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	f000 8140 	beq.w	8001684 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d00b      	beq.n	8001424 <HAL_GPIO_Init+0x48>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b02      	cmp	r3, #2
 8001412:	d007      	beq.n	8001424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001418:	2b11      	cmp	r3, #17
 800141a:	d003      	beq.n	8001424 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	2b12      	cmp	r3, #18
 8001422:	d130      	bne.n	8001486 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	2203      	movs	r2, #3
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145a:	2201      	movs	r2, #1
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	4013      	ands	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	091b      	lsrs	r3, r3, #4
 8001470:	f003 0201 	and.w	r2, r3, #1
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d003      	beq.n	80014c6 <HAL_GPIO_Init+0xea>
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d123      	bne.n	800150e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f003 0307 	and.w	r3, r3, #7
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	6939      	ldr	r1, [r7, #16]
 800150a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0203 	and.w	r2, r3, #3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 809a 	beq.w	8001684 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6193      	str	r3, [r2, #24]
 800155c:	4b52      	ldr	r3, [pc, #328]	; (80016a8 <HAL_GPIO_Init+0x2cc>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001568:	4a50      	ldr	r2, [pc, #320]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1e0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a46      	ldr	r2, [pc, #280]	; (80016b0 <HAL_GPIO_Init+0x2d4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1dc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a45      	ldr	r2, [pc, #276]	; (80016b4 <HAL_GPIO_Init+0x2d8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1d8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a44      	ldr	r2, [pc, #272]	; (80016b8 <HAL_GPIO_Init+0x2dc>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1d4>
 80015ac:	2303      	movs	r3, #3
 80015ae:	e006      	b.n	80015be <HAL_GPIO_Init+0x1e2>
 80015b0:	2305      	movs	r3, #5
 80015b2:	e004      	b.n	80015be <HAL_GPIO_Init+0x1e2>
 80015b4:	2302      	movs	r3, #2
 80015b6:	e002      	b.n	80015be <HAL_GPIO_Init+0x1e2>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_GPIO_Init+0x1e2>
 80015bc:	2300      	movs	r3, #0
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	f002 0203 	and.w	r2, r2, #3
 80015c4:	0092      	lsls	r2, r2, #2
 80015c6:	4093      	lsls	r3, r2
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ce:	4937      	ldr	r1, [pc, #220]	; (80016ac <HAL_GPIO_Init+0x2d0>)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	089b      	lsrs	r3, r3, #2
 80015d4:	3302      	adds	r3, #2
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015dc:	4b37      	ldr	r3, [pc, #220]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001600:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800162a:	4a24      	ldr	r2, [pc, #144]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001654:	4a19      	ldr	r2, [pc, #100]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43db      	mvns	r3, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4013      	ands	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_GPIO_Init+0x2e0>)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	f47f aea9 	bne.w	80013ec <HAL_GPIO_Init+0x10>
  }
}
 800169a:	bf00      	nop
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000
 80016b0:	48000400 	.word	0x48000400
 80016b4:	48000800 	.word	0x48000800
 80016b8:	48000c00 	.word	0x48000c00
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d0:	787b      	ldrb	r3, [r7, #1]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016dc:	e002      	b.n	80016e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016de:	887a      	ldrh	r2, [r7, #2]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	695b      	ldr	r3, [r3, #20]
 8001700:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	041a      	lsls	r2, r3, #16
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43d9      	mvns	r1, r3
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	400b      	ands	r3, r1
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	619a      	str	r2, [r3, #24]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800172a:	af00      	add	r7, sp, #0
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	f000 bef4 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 816a 	beq.w	8001a22 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800174e:	4bb3      	ldr	r3, [pc, #716]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d00c      	beq.n	8001774 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175a:	4bb0      	ldr	r3, [pc, #704]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b08      	cmp	r3, #8
 8001764:	d159      	bne.n	800181a <HAL_RCC_OscConfig+0xf6>
 8001766:	4bad      	ldr	r3, [pc, #692]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001772:	d152      	bne.n	800181a <HAL_RCC_OscConfig+0xf6>
 8001774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001778:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001780:	fa93 f3a3 	rbit	r3, r3
 8001784:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001788:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	fab3 f383 	clz	r3, r3
 8001790:	b2db      	uxtb	r3, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b01      	cmp	r3, #1
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x82>
 80017a0:	4b9e      	ldr	r3, [pc, #632]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0xae>
 80017a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80017b2:	fa93 f3a3 	rbit	r3, r3
 80017b6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80017c6:	fa93 f3a3 	rbit	r3, r3
 80017ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80017ce:	4b93      	ldr	r3, [pc, #588]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80017da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80017de:	fa92 f2a2 	rbit	r2, r2
 80017e2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80017e6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0220 	orr.w	r2, r2, #32
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 810c 	beq.w	8001a20 <HAL_RCC_OscConfig+0x2fc>
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f040 8106 	bne.w	8001a20 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	f000 be86 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x110>
 8001826:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a7c      	ldr	r2, [pc, #496]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e030      	b.n	8001896 <HAL_RCC_OscConfig+0x172>
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x134>
 800183e:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a76      	ldr	r2, [pc, #472]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b74      	ldr	r3, [pc, #464]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a73      	ldr	r2, [pc, #460]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e01e      	b.n	8001896 <HAL_RCC_OscConfig+0x172>
 8001858:	1d3b      	adds	r3, r7, #4
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001862:	d10c      	bne.n	800187e <HAL_RCC_OscConfig+0x15a>
 8001864:	4b6d      	ldr	r3, [pc, #436]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a6c      	ldr	r2, [pc, #432]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 800186a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b6a      	ldr	r3, [pc, #424]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a69      	ldr	r2, [pc, #420]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	e00b      	b.n	8001896 <HAL_RCC_OscConfig+0x172>
 800187e:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a66      	ldr	r2, [pc, #408]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a63      	ldr	r2, [pc, #396]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001890:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001894:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001896:	4b61      	ldr	r3, [pc, #388]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189a:	f023 020f 	bic.w	r2, r3, #15
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	495d      	ldr	r1, [pc, #372]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d059      	beq.n	8001968 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc52 	bl	800115c <HAL_GetTick>
 80018b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018bc:	e00a      	b.n	80018d4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018be:	f7ff fc4d 	bl	800115c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	; 0x64
 80018cc:	d902      	bls.n	80018d4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	f000 be29 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>
 80018d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018d8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80018e0:	fa93 f3a3 	rbit	r3, r3
 80018e4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80018e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ec:	fab3 f383 	clz	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	095b      	lsrs	r3, r3, #5
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d102      	bne.n	8001906 <HAL_RCC_OscConfig+0x1e2>
 8001900:	4b46      	ldr	r3, [pc, #280]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	e015      	b.n	8001932 <HAL_RCC_OscConfig+0x20e>
 8001906:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800190a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800191a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001922:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001936:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800193a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800193e:	fa92 f2a2 	rbit	r2, r2
 8001942:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001946:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800194a:	fab2 f282 	clz	r2, r2
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	f042 0220 	orr.w	r2, r2, #32
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	f002 021f 	and.w	r2, r2, #31
 800195a:	2101      	movs	r1, #1
 800195c:	fa01 f202 	lsl.w	r2, r1, r2
 8001960:	4013      	ands	r3, r2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ab      	beq.n	80018be <HAL_RCC_OscConfig+0x19a>
 8001966:	e05c      	b.n	8001a22 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fbf8 	bl	800115c <HAL_GetTick>
 800196c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001972:	f7ff fbf3 	bl	800115c <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d902      	bls.n	8001988 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	f000 bdcf 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>
 8001988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800198c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001990:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001994:	fa93 f3a3 	rbit	r3, r3
 8001998:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800199c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a0:	fab3 f383 	clz	r3, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	095b      	lsrs	r3, r3, #5
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_OscConfig+0x296>
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	e015      	b.n	80019e6 <HAL_RCC_OscConfig+0x2c2>
 80019ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019be:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80019ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80019d6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_RCC_OscConfig+0x2f8>)
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ea:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80019ee:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80019f2:	fa92 f2a2 	rbit	r2, r2
 80019f6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80019fa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f002 021f 	and.w	r2, r2, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d1ab      	bne.n	8001972 <HAL_RCC_OscConfig+0x24e>
 8001a1a:	e002      	b.n	8001a22 <HAL_RCC_OscConfig+0x2fe>
 8001a1c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 816f 	beq.w	8001d10 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a32:	4bd0      	ldr	r3, [pc, #832]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a3e:	4bcd      	ldr	r3, [pc, #820]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d16c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x400>
 8001a4a:	4bca      	ldr	r3, [pc, #808]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d166      	bne.n	8001b24 <HAL_RCC_OscConfig+0x400>
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001a60:	fa93 f3a3 	rbit	r3, r3
 8001a64:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001a68:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6c:	fab3 f383 	clz	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d102      	bne.n	8001a86 <HAL_RCC_OscConfig+0x362>
 8001a80:	4bbc      	ldr	r3, [pc, #752]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x38a>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001aaa:	4bb2      	ldr	r3, [pc, #712]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ab4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ac0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3cc>
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d002      	beq.n	8001af0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	f000 bd1b 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4ba0      	ldr	r3, [pc, #640]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	21f8      	movs	r1, #248	; 0xf8
 8001b00:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b04:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b08:	fa91 f1a1 	rbit	r1, r1
 8001b0c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b10:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b14:	fab1 f181 	clz	r1, r1
 8001b18:	b2c9      	uxtb	r1, r1
 8001b1a:	408b      	lsls	r3, r1
 8001b1c:	4995      	ldr	r1, [pc, #596]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e0f5      	b.n	8001d10 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	1d3b      	adds	r3, r7, #4
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 8085 	beq.w	8001c3a <HAL_RCC_OscConfig+0x516>
 8001b30:	2301      	movs	r3, #1
 8001b32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001b42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	fab3 f383 	clz	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	461a      	mov	r2, r3
 8001b58:	2301      	movs	r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fafe 	bl	800115c <HAL_GetTick>
 8001b60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e00a      	b.n	8001b7c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff faf9 	bl	800115c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d902      	bls.n	8001b7c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	f000 bcd5 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001b86:	fa93 f3a3 	rbit	r3, r3
 8001b8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001b8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	fab3 f383 	clz	r3, r3
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	095b      	lsrs	r3, r3, #5
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d102      	bne.n	8001bac <HAL_RCC_OscConfig+0x488>
 8001ba6:	4b73      	ldr	r3, [pc, #460]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	e013      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4b0>
 8001bac:	2302      	movs	r3, #2
 8001bae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001bb6:	fa93 f3a3 	rbit	r3, r3
 8001bba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001bc4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001bda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001bde:	fa92 f2a2 	rbit	r2, r2
 8001be2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001be6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001bea:	fab2 f282 	clz	r2, r2
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f042 0220 	orr.w	r2, r2, #32
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	f002 021f 	and.w	r2, r2, #31
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0af      	beq.n	8001b66 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c06:	4b5b      	ldr	r3, [pc, #364]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	21f8      	movs	r1, #248	; 0xf8
 8001c16:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c1e:	fa91 f1a1 	rbit	r1, r1
 8001c22:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c26:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c2a:	fab1 f181 	clz	r1, r1
 8001c2e:	b2c9      	uxtb	r1, r1
 8001c30:	408b      	lsls	r3, r1
 8001c32:	4950      	ldr	r1, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e06a      	b.n	8001d10 <HAL_RCC_OscConfig+0x5ec>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001c4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c5a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	461a      	mov	r2, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fa79 	bl	800115c <HAL_GetTick>
 8001c6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	e00a      	b.n	8001c86 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c70:	f7ff fa74 	bl	800115c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d902      	bls.n	8001c86 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	f000 bc50 	b.w	8002526 <HAL_RCC_OscConfig+0xe02>
 8001c86:	2302      	movs	r3, #2
 8001c88:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d102      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x592>
 8001cb0:	4b30      	ldr	r3, [pc, #192]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	e013      	b.n	8001cde <HAL_RCC_OscConfig+0x5ba>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001cc0:	fa93 f3a3 	rbit	r3, r3
 8001cc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001cce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001cd2:	fa93 f3a3 	rbit	r3, r3
 8001cd6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_RCC_OscConfig+0x650>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001ce4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001ce8:	fa92 f2a2 	rbit	r2, r2
 8001cec:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001cf0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cf4:	fab2 f282 	clz	r2, r2
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f042 0220 	orr.w	r2, r2, #32
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	f002 021f 	and.w	r2, r2, #31
 8001d04:	2101      	movs	r1, #1
 8001d06:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1af      	bne.n	8001c70 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80da 	beq.w	8001ed4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d069      	beq.n	8001dfe <HAL_RCC_OscConfig+0x6da>
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001d3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	4b0b      	ldr	r3, [pc, #44]	; (8001d78 <HAL_RCC_OscConfig+0x654>)
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	2301      	movs	r3, #1
 8001d52:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d54:	f7ff fa02 	bl	800115c <HAL_GetTick>
 8001d58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5c:	e00e      	b.n	8001d7c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d5e:	f7ff f9fd 	bl	800115c <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d906      	bls.n	8001d7c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e3d9      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	10908120 	.word	0x10908120
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d82:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d86:	fa93 f3a3 	rbit	r3, r3
 8001d8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d8e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d92:	2202      	movs	r2, #2
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	fa93 f2a3 	rbit	r2, r3
 8001da0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001daa:	2202      	movs	r2, #2
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	fa93 f2a3 	rbit	r2, r3
 8001db8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001dbc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	4ba5      	ldr	r3, [pc, #660]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	6019      	str	r1, [r3, #0]
 8001dca:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	fa93 f1a3 	rbit	r1, r3
 8001dd4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dd8:	6019      	str	r1, [r3, #0]
  return result;
 8001dda:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f003 031f 	and.w	r3, r3, #31
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f303 	lsl.w	r3, r1, r3
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d0b0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x63a>
 8001dfc:	e06a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x7b0>
 8001dfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e14:	601a      	str	r2, [r3, #0]
  return result;
 8001e16:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e1a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461a      	mov	r2, r3
 8001e24:	4b8c      	ldr	r3, [pc, #560]	; (8002058 <HAL_RCC_OscConfig+0x934>)
 8001e26:	4413      	add	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e30:	f7ff f994 	bl	800115c <HAL_GetTick>
 8001e34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e38:	e009      	b.n	8001e4e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3a:	f7ff f98f 	bl	800115c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e36b      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 8001e4e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e52:	2202      	movs	r2, #2
 8001e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e56:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	fa93 f2a3 	rbit	r2, r3
 8001e60:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e82:	2202      	movs	r2, #2
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	fa93 f2a3 	rbit	r2, r3
 8001e90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e96:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	6019      	str	r1, [r3, #0]
 8001ea2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	fa93 f1a3 	rbit	r1, r3
 8001eac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001eb0:	6019      	str	r1, [r3, #0]
  return result;
 8001eb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	4013      	ands	r3, r2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1b2      	bne.n	8001e3a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8158 	beq.w	8002194 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eea:	4b5a      	ldr	r3, [pc, #360]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d112      	bne.n	8001f1c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b57      	ldr	r3, [pc, #348]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a56      	ldr	r2, [pc, #344]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f0a:	f107 0308 	add.w	r3, r7, #8
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	f107 0308 	add.w	r3, r7, #8
 8001f14:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	; (800205c <HAL_RCC_OscConfig+0x938>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11a      	bne.n	8001f5e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f28:	4b4c      	ldr	r3, [pc, #304]	; (800205c <HAL_RCC_OscConfig+0x938>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a4b      	ldr	r2, [pc, #300]	; (800205c <HAL_RCC_OscConfig+0x938>)
 8001f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f32:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f34:	f7ff f912 	bl	800115c <HAL_GetTick>
 8001f38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	e009      	b.n	8001f52 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3e:	f7ff f90d 	bl	800115c <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e2e9      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f52:	4b42      	ldr	r3, [pc, #264]	; (800205c <HAL_RCC_OscConfig+0x938>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0ef      	beq.n	8001f3e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d106      	bne.n	8001f76 <HAL_RCC_OscConfig+0x852>
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	4a39      	ldr	r2, [pc, #228]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6213      	str	r3, [r2, #32]
 8001f74:	e02f      	b.n	8001fd6 <HAL_RCC_OscConfig+0x8b2>
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x876>
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a33      	ldr	r2, [pc, #204]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	4a30      	ldr	r2, [pc, #192]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001f92:	f023 0304 	bic.w	r3, r3, #4
 8001f96:	6213      	str	r3, [r2, #32]
 8001f98:	e01d      	b.n	8001fd6 <HAL_RCC_OscConfig+0x8b2>
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d10c      	bne.n	8001fbe <HAL_RCC_OscConfig+0x89a>
 8001fa4:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	4b28      	ldr	r3, [pc, #160]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6213      	str	r3, [r2, #32]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x8b2>
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	4a24      	ldr	r2, [pc, #144]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fc4:	f023 0301 	bic.w	r3, r3, #1
 8001fc8:	6213      	str	r3, [r2, #32]
 8001fca:	4b22      	ldr	r3, [pc, #136]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4a21      	ldr	r2, [pc, #132]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d06b      	beq.n	80020b8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f8bc 	bl	800115c <HAL_GetTick>
 8001fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	e00b      	b.n	8002002 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7ff f8b7 	bl	800115c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e291      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 8002002:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002006:	2202      	movs	r2, #2
 8002008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	fa93 f2a3 	rbit	r2, r3
 8002014:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800201e:	2202      	movs	r2, #2
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	fa93 f2a3 	rbit	r2, r3
 800202c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002030:	601a      	str	r2, [r3, #0]
  return result;
 8002032:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002036:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	b2db      	uxtb	r3, r3
 8002042:	f043 0302 	orr.w	r3, r3, #2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d109      	bne.n	8002060 <HAL_RCC_OscConfig+0x93c>
 800204c:	4b01      	ldr	r3, [pc, #4]	; (8002054 <HAL_RCC_OscConfig+0x930>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	e014      	b.n	800207c <HAL_RCC_OscConfig+0x958>
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	10908120 	.word	0x10908120
 800205c:	40007000 	.word	0x40007000
 8002060:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002064:	2202      	movs	r2, #2
 8002066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	fa93 f2a3 	rbit	r2, r3
 8002072:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	4bbb      	ldr	r3, [pc, #748]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002080:	2102      	movs	r1, #2
 8002082:	6011      	str	r1, [r2, #0]
 8002084:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002088:	6812      	ldr	r2, [r2, #0]
 800208a:	fa92 f1a2 	rbit	r1, r2
 800208e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002092:	6011      	str	r1, [r2, #0]
  return result;
 8002094:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	fab2 f282 	clz	r2, r2
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	f002 021f 	and.w	r2, r2, #31
 80020aa:	2101      	movs	r1, #1
 80020ac:	fa01 f202 	lsl.w	r2, r1, r2
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d099      	beq.n	8001fea <HAL_RCC_OscConfig+0x8c6>
 80020b6:	e063      	b.n	8002180 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b8:	f7ff f850 	bl	800115c <HAL_GetTick>
 80020bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c0:	e00b      	b.n	80020da <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f84b 	bl	800115c <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e225      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 80020da:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020de:	2202      	movs	r2, #2
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020f6:	2202      	movs	r2, #2
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002108:	601a      	str	r2, [r3, #0]
  return result;
 800210a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800210e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	b2db      	uxtb	r3, r3
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d102      	bne.n	800212a <HAL_RCC_OscConfig+0xa06>
 8002124:	4b90      	ldr	r3, [pc, #576]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	e00d      	b.n	8002146 <HAL_RCC_OscConfig+0xa22>
 800212a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800212e:	2202      	movs	r2, #2
 8002130:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	fa93 f2a3 	rbit	r2, r3
 800213c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	4b89      	ldr	r3, [pc, #548]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800214a:	2102      	movs	r1, #2
 800214c:	6011      	str	r1, [r2, #0]
 800214e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	fa92 f1a2 	rbit	r1, r2
 8002158:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800215c:	6011      	str	r1, [r2, #0]
  return result;
 800215e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002162:	6812      	ldr	r2, [r2, #0]
 8002164:	fab2 f282 	clz	r2, r2
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	f002 021f 	and.w	r2, r2, #31
 8002174:	2101      	movs	r1, #1
 8002176:	fa01 f202 	lsl.w	r2, r1, r2
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1a0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002180:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b77      	ldr	r3, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	4a76      	ldr	r2, [pc, #472]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 81c2 	beq.w	8002524 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a0:	4b71      	ldr	r3, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	f000 819c 	beq.w	80024e6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	f040 8114 	bne.w	80023e2 <HAL_RCC_OscConfig+0xcbe>
 80021ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	fa93 f2a3 	rbit	r2, r3
 80021ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021d2:	601a      	str	r2, [r3, #0]
  return result;
 80021d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021da:	fab3 f383 	clz	r3, r3
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	2300      	movs	r3, #0
 80021ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7fe ffb4 	bl	800115c <HAL_GetTick>
 80021f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f8:	e009      	b.n	800220e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021fa:	f7fe ffaf 	bl	800115c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b02      	cmp	r3, #2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e18b      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 800220e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002212:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002216:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002226:	601a      	str	r2, [r3, #0]
  return result;
 8002228:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800222c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	b2db      	uxtb	r3, r3
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b01      	cmp	r3, #1
 8002240:	d102      	bne.n	8002248 <HAL_RCC_OscConfig+0xb24>
 8002242:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	e01b      	b.n	8002280 <HAL_RCC_OscConfig+0xb5c>
 8002248:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800224c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fa93 f2a3 	rbit	r2, r3
 800225c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002266:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	fa93 f2a3 	rbit	r2, r3
 8002276:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002284:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002288:	6011      	str	r1, [r2, #0]
 800228a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	fa92 f1a2 	rbit	r1, r2
 8002294:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002298:	6011      	str	r1, [r2, #0]
  return result;
 800229a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	fab2 f282 	clz	r2, r2
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	f042 0220 	orr.w	r2, r2, #32
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f002 021f 	and.w	r2, r2, #31
 80022b0:	2101      	movs	r1, #1
 80022b2:	fa01 f202 	lsl.w	r2, r1, r2
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d19e      	bne.n	80021fa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	4925      	ldr	r1, [pc, #148]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f0:	601a      	str	r2, [r3, #0]
  return result;
 80022f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002302:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	461a      	mov	r2, r3
 800230a:	2301      	movs	r3, #1
 800230c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230e:	f7fe ff25 	bl	800115c <HAL_GetTick>
 8002312:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002316:	e009      	b.n	800232c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe ff20 	bl	800115c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e0fc      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 800232c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002330:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002334:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002336:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	fa93 f2a3 	rbit	r2, r3
 8002340:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002344:	601a      	str	r2, [r3, #0]
  return result;
 8002346:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800234a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b01      	cmp	r3, #1
 800235e:	d105      	bne.n	800236c <HAL_RCC_OscConfig+0xc48>
 8002360:	4b01      	ldr	r3, [pc, #4]	; (8002368 <HAL_RCC_OscConfig+0xc44>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	e01e      	b.n	80023a4 <HAL_RCC_OscConfig+0xc80>
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002370:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002374:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	fa93 f2a3 	rbit	r2, r3
 8002380:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800238a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	fa93 f2a3 	rbit	r2, r3
 800239a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	4b63      	ldr	r3, [pc, #396]	; (8002530 <HAL_RCC_OscConfig+0xe0c>)
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80023ac:	6011      	str	r1, [r2, #0]
 80023ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80023b2:	6812      	ldr	r2, [r2, #0]
 80023b4:	fa92 f1a2 	rbit	r1, r2
 80023b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023bc:	6011      	str	r1, [r2, #0]
  return result;
 80023be:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80023c2:	6812      	ldr	r2, [r2, #0]
 80023c4:	fab2 f282 	clz	r2, r2
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	f042 0220 	orr.w	r2, r2, #32
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	f002 021f 	and.w	r2, r2, #31
 80023d4:	2101      	movs	r1, #1
 80023d6:	fa01 f202 	lsl.w	r2, r1, r2
 80023da:	4013      	ands	r3, r2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d09b      	beq.n	8002318 <HAL_RCC_OscConfig+0xbf4>
 80023e0:	e0a0      	b.n	8002524 <HAL_RCC_OscConfig+0xe00>
 80023e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	fa93 f2a3 	rbit	r2, r3
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	601a      	str	r2, [r3, #0]
  return result;
 80023fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002400:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	fab3 f383 	clz	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800240c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	461a      	mov	r2, r3
 8002414:	2300      	movs	r3, #0
 8002416:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fea0 	bl	800115c <HAL_GetTick>
 800241c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002420:	e009      	b.n	8002436 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002422:	f7fe fe9b 	bl	800115c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e077      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
 8002436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800243a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	fa93 f2a3 	rbit	r2, r3
 800244a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800244e:	601a      	str	r2, [r3, #0]
  return result;
 8002450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002454:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0xd4c>
 800246a:	4b31      	ldr	r3, [pc, #196]	; (8002530 <HAL_RCC_OscConfig+0xe0c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e01b      	b.n	80024a8 <HAL_RCC_OscConfig+0xd84>
 8002470:	f107 0320 	add.w	r3, r7, #32
 8002474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247a:	f107 0320 	add.w	r3, r7, #32
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	fa93 f2a3 	rbit	r2, r3
 8002484:	f107 031c 	add.w	r3, r7, #28
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f107 0318 	add.w	r3, r7, #24
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f107 0314 	add.w	r3, r7, #20
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_RCC_OscConfig+0xe0c>)
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	f107 0210 	add.w	r2, r7, #16
 80024ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024b0:	6011      	str	r1, [r2, #0]
 80024b2:	f107 0210 	add.w	r2, r7, #16
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	fa92 f1a2 	rbit	r1, r2
 80024bc:	f107 020c 	add.w	r2, r7, #12
 80024c0:	6011      	str	r1, [r2, #0]
  return result;
 80024c2:	f107 020c 	add.w	r2, r7, #12
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	fab2 f282 	clz	r2, r2
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	f042 0220 	orr.w	r2, r2, #32
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	f002 021f 	and.w	r2, r2, #31
 80024d8:	2101      	movs	r1, #1
 80024da:	fa01 f202 	lsl.w	r2, r1, r2
 80024de:	4013      	ands	r3, r2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d19e      	bne.n	8002422 <HAL_RCC_OscConfig+0xcfe>
 80024e4:	e01e      	b.n	8002524 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e018      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024f4:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <HAL_RCC_OscConfig+0xe0c>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024fc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002500:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002504:	1d3b      	adds	r3, r7, #4
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	429a      	cmp	r2, r3
 800250c:	d108      	bne.n	8002520 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800250e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002512:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800251c:	429a      	cmp	r2, r3
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000

08002534 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b09e      	sub	sp, #120	; 0x78
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e162      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b90      	ldr	r3, [pc, #576]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d910      	bls.n	800257c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b8d      	ldr	r3, [pc, #564]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 0207 	bic.w	r2, r3, #7
 8002562:	498b      	ldr	r1, [pc, #556]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4313      	orrs	r3, r2
 8002568:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b89      	ldr	r3, [pc, #548]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e14a      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b82      	ldr	r3, [pc, #520]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	497f      	ldr	r1, [pc, #508]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f000 80dc 	beq.w	8002760 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d13c      	bne.n	800262a <HAL_RCC_ClockConfig+0xf6>
 80025b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80025be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c0:	fab3 f383 	clz	r3, r3
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_RCC_ClockConfig+0xa6>
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	e00f      	b.n	80025fa <HAL_RCC_ClockConfig+0xc6>
 80025da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	667b      	str	r3, [r7, #100]	; 0x64
 80025e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ec:	663b      	str	r3, [r7, #96]	; 0x60
 80025ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f0:	fa93 f3a3 	rbit	r3, r3
 80025f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80025f6:	4b67      	ldr	r3, [pc, #412]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8002600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002602:	fa92 f2a2 	rbit	r2, r2
 8002606:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d17b      	bne.n	800271e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e0f3      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d13c      	bne.n	80026ac <HAL_RCC_ClockConfig+0x178>
 8002632:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002636:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	095b      	lsrs	r3, r3, #5
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d102      	bne.n	800265c <HAL_RCC_ClockConfig+0x128>
 8002656:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	e00f      	b.n	800267c <HAL_RCC_ClockConfig+0x148>
 800265c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002660:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002664:	fa93 f3a3 	rbit	r3, r3
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
 800266a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266e:	643b      	str	r3, [r7, #64]	; 0x40
 8002670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002678:	4b46      	ldr	r3, [pc, #280]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002680:	63ba      	str	r2, [r7, #56]	; 0x38
 8002682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002684:	fa92 f2a2 	rbit	r2, r2
 8002688:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800268a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268c:	fab2 f282 	clz	r2, r2
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	f042 0220 	orr.w	r2, r2, #32
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d13a      	bne.n	800271e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e0b2      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
 80026ac:	2302      	movs	r3, #2
 80026ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	095b      	lsrs	r3, r3, #5
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d102      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x1a0>
 80026ce:	4b31      	ldr	r3, [pc, #196]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	e00d      	b.n	80026f0 <HAL_RCC_ClockConfig+0x1bc>
 80026d4:	2302      	movs	r3, #2
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
 80026e0:	2302      	movs	r3, #2
 80026e2:	623b      	str	r3, [r7, #32]
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	fa93 f3a3 	rbit	r3, r3
 80026ea:	61fb      	str	r3, [r7, #28]
 80026ec:	4b29      	ldr	r3, [pc, #164]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2202      	movs	r2, #2
 80026f2:	61ba      	str	r2, [r7, #24]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	fa92 f2a2 	rbit	r2, r2
 80026fa:	617a      	str	r2, [r7, #20]
  return result;
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b2d2      	uxtb	r2, r2
 800270a:	f002 021f 	and.w	r2, r2, #31
 800270e:	2101      	movs	r1, #1
 8002710:	fa01 f202 	lsl.w	r2, r1, r2
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e079      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800271e:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f023 0203 	bic.w	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	491a      	ldr	r1, [pc, #104]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002730:	f7fe fd14 	bl	800115c <HAL_GetTick>
 8002734:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002736:	e00a      	b.n	800274e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002738:	f7fe fd10 	bl	800115c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e061      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	4b11      	ldr	r3, [pc, #68]	; (8002794 <HAL_RCC_ClockConfig+0x260>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 020c 	and.w	r2, r3, #12
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	429a      	cmp	r2, r3
 800275e:	d1eb      	bne.n	8002738 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	429a      	cmp	r2, r3
 800276c:	d214      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800276e:	4b08      	ldr	r3, [pc, #32]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 0207 	bic.w	r2, r3, #7
 8002776:	4906      	ldr	r1, [pc, #24]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800277e:	4b04      	ldr	r3, [pc, #16]	; (8002790 <HAL_RCC_ClockConfig+0x25c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	429a      	cmp	r2, r3
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e040      	b.n	8002812 <HAL_RCC_ClockConfig+0x2de>
 8002790:	40022000 	.word	0x40022000
 8002794:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCC_ClockConfig+0x2e8>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	491a      	ldr	r1, [pc, #104]	; (800281c <HAL_RCC_ClockConfig+0x2e8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_RCC_ClockConfig+0x2e8>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	4912      	ldr	r1, [pc, #72]	; (800281c <HAL_RCC_ClockConfig+0x2e8>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027d6:	f000 f829 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80027da:	4601      	mov	r1, r0
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_RCC_ClockConfig+0x2e8>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027e4:	22f0      	movs	r2, #240	; 0xf0
 80027e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	fa92 f2a2 	rbit	r2, r2
 80027ee:	60fa      	str	r2, [r7, #12]
  return result;
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	fab2 f282 	clz	r2, r2
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	40d3      	lsrs	r3, r2
 80027fa:	4a09      	ldr	r2, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x2ec>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002802:	4a08      	ldr	r2, [pc, #32]	; (8002824 <HAL_RCC_ClockConfig+0x2f0>)
 8002804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_RCC_ClockConfig+0x2f4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fe fc62 	bl	80010d4 <HAL_InitTick>
  
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3778      	adds	r7, #120	; 0x78
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	08003c34 	.word	0x08003c34
 8002824:	20000000 	.word	0x20000000
 8002828:	20000004 	.word	0x20000004

0800282c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	b08b      	sub	sp, #44	; 0x2c
 8002830:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	2300      	movs	r3, #0
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	2300      	movs	r3, #0
 8002840:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002846:	4b29      	ldr	r3, [pc, #164]	; (80028ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d002      	beq.n	800285c <HAL_RCC_GetSysClockFreq+0x30>
 8002856:	2b08      	cmp	r3, #8
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0x36>
 800285a:	e03c      	b.n	80028d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800285e:	623b      	str	r3, [r7, #32]
      break;
 8002860:	e03c      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002868:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800286c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	fa92 f2a2 	rbit	r2, r2
 8002874:	607a      	str	r2, [r7, #4]
  return result;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	fab2 f282 	clz	r2, r2
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	40d3      	lsrs	r3, r2
 8002880:	4a1c      	ldr	r2, [pc, #112]	; (80028f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	220f      	movs	r2, #15
 8002890:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	60fa      	str	r2, [r7, #12]
  return result;
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	40d3      	lsrs	r3, r2
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fb02 f303 	mul.w	r3, r2, r3
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
 80028c4:	e004      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80028ca:	fb02 f303 	mul.w	r3, r2, r3
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	623b      	str	r3, [r7, #32]
      break;
 80028d4:	e002      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d6:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028d8:	623b      	str	r3, [r7, #32]
      break;
 80028da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	372c      	adds	r7, #44	; 0x2c
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40021000 	.word	0x40021000
 80028f0:	007a1200 	.word	0x007a1200
 80028f4:	08003c4c 	.word	0x08003c4c
 80028f8:	08003c5c 	.word	0x08003c5c
 80028fc:	003d0900 	.word	0x003d0900

08002900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCC_GetHCLKFreq+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	20000000 	.word	0x20000000

08002918 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800291e:	f7ff ffef 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002922:	4601      	mov	r1, r0
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800292c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002930:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	fa92 f2a2 	rbit	r2, r2
 8002938:	603a      	str	r2, [r7, #0]
  return result;
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	fab2 f282 	clz	r2, r2
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	40d3      	lsrs	r3, r2
 8002944:	4a04      	ldr	r2, [pc, #16]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002946:	5cd3      	ldrb	r3, [r2, r3]
 8002948:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	08003c44 	.word	0x08003c44

0800295c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002962:	f7ff ffcd 	bl	8002900 <HAL_RCC_GetHCLKFreq>
 8002966:	4601      	mov	r1, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002970:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002974:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	fa92 f2a2 	rbit	r2, r2
 800297c:	603a      	str	r2, [r7, #0]
  return result;
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	fab2 f282 	clz	r2, r2
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	40d3      	lsrs	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_RCC_GetPCLK2Freq+0x40>)
 800298a:	5cd3      	ldrb	r3, [r2, r3]
 800298c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	08003c44 	.word	0x08003c44

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b092      	sub	sp, #72	; 0x48
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80cd 	beq.w	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c4:	4b86      	ldr	r3, [pc, #536]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10e      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029d0:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4a82      	ldr	r2, [pc, #520]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029da:	61d3      	str	r3, [r2, #28]
 80029dc:	4b80      	ldr	r3, [pc, #512]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d118      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029fa:	4b7a      	ldr	r3, [pc, #488]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a79      	ldr	r2, [pc, #484]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a04:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fba9 	bl	800115c <HAL_GetTick>
 8002a0a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0c:	e008      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a0e:	f7fe fba5 	bl	800115c <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b64      	cmp	r3, #100	; 0x64
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0db      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a20:	4b70      	ldr	r3, [pc, #448]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a2c:	4b6c      	ldr	r3, [pc, #432]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a34:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d07d      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d076      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a4a:	4b65      	ldr	r3, [pc, #404]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a58:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	4b5e      	ldr	r3, [pc, #376]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a6e:	4413      	add	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	461a      	mov	r2, r3
 8002a74:	2301      	movs	r3, #1
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a80:	fa93 f3a3 	rbit	r3, r3
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b55      	ldr	r3, [pc, #340]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	461a      	mov	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a9c:	4a50      	ldr	r2, [pc, #320]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d045      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7fe fb56 	bl	800115c <HAL_GetTick>
 8002ab0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fb52 	bl	800115c <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e086      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002aca:	2302      	movs	r3, #2
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	fa93 f3a3 	rbit	r3, r3
 8002ae0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f043 0302 	orr.w	r3, r3, #2
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d102      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002af8:	4b39      	ldr	r3, [pc, #228]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	e007      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002afe:	2302      	movs	r3, #2
 8002b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	fa93 f3a3 	rbit	r3, r3
 8002b08:	617b      	str	r3, [r7, #20]
 8002b0a:	4b35      	ldr	r3, [pc, #212]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	2202      	movs	r2, #2
 8002b10:	613a      	str	r2, [r7, #16]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	fa92 f2a2 	rbit	r2, r2
 8002b18:	60fa      	str	r2, [r7, #12]
  return result;
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	fab2 f282 	clz	r2, r2
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	f002 021f 	and.w	r2, r2, #31
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0bd      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b38:	4b29      	ldr	r3, [pc, #164]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	4926      	ldr	r1, [pc, #152]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d105      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4a22      	ldr	r2, [pc, #136]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f023 0203 	bic.w	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	491a      	ldr	r1, [pc, #104]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b88:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	f023 0210 	bic.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4912      	ldr	r1, [pc, #72]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	490b      	ldr	r1, [pc, #44]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bc4:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3748      	adds	r7, #72	; 0x48
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40007000 	.word	0x40007000
 8002be8:	10908100 	.word	0x10908100

08002bec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e049      	b.n	8002c92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fd ff5c 	bl	8000ad0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 fb16 	bl	800325c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d001      	beq.n	8002cb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e040      	b.n	8002d36 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1c      	ldr	r2, [pc, #112]	; (8002d44 <HAL_TIM_Base_Start_IT+0xa8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x58>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cde:	d009      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x58>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a18      	ldr	r2, [pc, #96]	; (8002d48 <HAL_TIM_Base_Start_IT+0xac>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_TIM_Base_Start_IT+0x58>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a17      	ldr	r2, [pc, #92]	; (8002d4c <HAL_TIM_Base_Start_IT+0xb0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d115      	bne.n	8002d20 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689a      	ldr	r2, [r3, #8]
 8002cfa:	4b15      	ldr	r3, [pc, #84]	; (8002d50 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b06      	cmp	r3, #6
 8002d04:	d015      	beq.n	8002d32 <HAL_TIM_Base_Start_IT+0x96>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d0c:	d011      	beq.n	8002d32 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1e:	e008      	b.n	8002d32 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e000      	b.n	8002d34 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	00010007 	.word	0x00010007

08002d54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e097      	b.n	8002e98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7fd fdfb 	bl	8000978 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2202      	movs	r2, #2
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002d98:	f023 0307 	bic.w	r3, r3, #7
 8002d9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f000 fa57 	bl	800325c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd6:	f023 0303 	bic.w	r3, r3, #3
 8002dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	4313      	orrs	r3, r2
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002df4:	f023 030c 	bic.w	r3, r3, #12
 8002df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	69db      	ldr	r3, [r3, #28]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	011a      	lsls	r2, r3, #4
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	031b      	lsls	r3, r3, #12
 8002e24:	4313      	orrs	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002e3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	695b      	ldr	r3, [r3, #20]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4313      	orrs	r3, r2
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	697a      	ldr	r2, [r7, #20]
 8002e54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ec8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d110      	bne.n	8002ef2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d102      	bne.n	8002edc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ed6:	7b7b      	ldrb	r3, [r7, #13]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d001      	beq.n	8002ee0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e068      	b.n	8002fb2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ef0:	e031      	b.n	8002f56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b04      	cmp	r3, #4
 8002ef6:	d110      	bne.n	8002f1a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ef8:	7bbb      	ldrb	r3, [r7, #14]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002efe:	7b3b      	ldrb	r3, [r7, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d001      	beq.n	8002f08 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e054      	b.n	8002fb2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f18:	e01d      	b.n	8002f56 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f20:	7bbb      	ldrb	r3, [r7, #14]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d105      	bne.n	8002f32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f26:	7b7b      	ldrb	r3, [r7, #13]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d102      	bne.n	8002f32 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f2c:	7b3b      	ldrb	r3, [r7, #12]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d001      	beq.n	8002f36 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e03d      	b.n	8002fb2 <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2202      	movs	r2, #2
 8002f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2202      	movs	r2, #2
 8002f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_TIM_Encoder_Start+0xc2>
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d008      	beq.n	8002f72 <HAL_TIM_Encoder_Start+0xd2>
 8002f60:	e00f      	b.n	8002f82 <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2201      	movs	r2, #1
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f9ee 	bl	800334c <TIM_CCxChannelCmd>
      break;
 8002f70:	e016      	b.n	8002fa0 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	2104      	movs	r1, #4
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 f9e6 	bl	800334c <TIM_CCxChannelCmd>
      break;
 8002f80:	e00e      	b.n	8002fa0 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2201      	movs	r2, #1
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f9de 	bl	800334c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2201      	movs	r2, #1
 8002f96:	2104      	movs	r1, #4
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f000 f9d7 	bl	800334c <TIM_CCxChannelCmd>
      break;
 8002f9e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b082      	sub	sp, #8
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d122      	bne.n	8003016 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d11b      	bne.n	8003016 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0202 	mvn.w	r2, #2
 8002fe6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f90f 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 8003002:	e005      	b.n	8003010 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f901 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f912 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d122      	bne.n	800306a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0304 	and.w	r3, r3, #4
 800302e:	2b04      	cmp	r3, #4
 8003030:	d11b      	bne.n	800306a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0204 	mvn.w	r2, #4
 800303a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8e5 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 8003056:	e005      	b.n	8003064 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f8d7 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8e8 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b08      	cmp	r3, #8
 8003076:	d122      	bne.n	80030be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b08      	cmp	r3, #8
 8003084:	d11b      	bne.n	80030be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0208 	mvn.w	r2, #8
 800308e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2204      	movs	r2, #4
 8003094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8bb 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 80030aa:	e005      	b.n	80030b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f8ad 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f8be 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d122      	bne.n	8003112 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d11b      	bne.n	8003112 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0210 	mvn.w	r2, #16
 80030e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2208      	movs	r2, #8
 80030e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f891 	bl	8003220 <HAL_TIM_IC_CaptureCallback>
 80030fe:	e005      	b.n	800310c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f883 	bl	800320c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f894 	bl	8003234 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10e      	bne.n	800313e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	2b01      	cmp	r3, #1
 800312c:	d107      	bne.n	800313e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f06f 0201 	mvn.w	r2, #1
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f85d 	bl	80031f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b80      	cmp	r3, #128	; 0x80
 800314a:	d10e      	bne.n	800316a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003156:	2b80      	cmp	r3, #128	; 0x80
 8003158:	d107      	bne.n	800316a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f98f 	bl	8003488 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003184:	2b80      	cmp	r3, #128	; 0x80
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 f982 	bl	800349c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a2:	2b40      	cmp	r3, #64	; 0x40
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b40      	cmp	r3, #64	; 0x40
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f842 	bl	8003248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d107      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0220 	mvn.w	r2, #32
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f942 	bl	8003474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a32      	ldr	r2, [pc, #200]	; (8003338 <TIM_Base_SetConfig+0xdc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <TIM_Base_SetConfig+0x28>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800327a:	d003      	beq.n	8003284 <TIM_Base_SetConfig+0x28>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a2f      	ldr	r2, [pc, #188]	; (800333c <TIM_Base_SetConfig+0xe0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d108      	bne.n	8003296 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <TIM_Base_SetConfig+0xdc>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d013      	beq.n	80032c6 <TIM_Base_SetConfig+0x6a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d00f      	beq.n	80032c6 <TIM_Base_SetConfig+0x6a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a24      	ldr	r2, [pc, #144]	; (800333c <TIM_Base_SetConfig+0xe0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <TIM_Base_SetConfig+0x6a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a23      	ldr	r2, [pc, #140]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <TIM_Base_SetConfig+0x6a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a22      	ldr	r2, [pc, #136]	; (8003344 <TIM_Base_SetConfig+0xe8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <TIM_Base_SetConfig+0x6a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a21      	ldr	r2, [pc, #132]	; (8003348 <TIM_Base_SetConfig+0xec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d108      	bne.n	80032d8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <TIM_Base_SetConfig+0xdc>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00b      	beq.n	800331c <TIM_Base_SetConfig+0xc0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <TIM_Base_SetConfig+0xe4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d007      	beq.n	800331c <TIM_Base_SetConfig+0xc0>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <TIM_Base_SetConfig+0xe8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d003      	beq.n	800331c <TIM_Base_SetConfig+0xc0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0c      	ldr	r2, [pc, #48]	; (8003348 <TIM_Base_SetConfig+0xec>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d103      	bne.n	8003324 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	615a      	str	r2, [r3, #20]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40012c00 	.word	0x40012c00
 800333c:	40000400 	.word	0x40000400
 8003340:	40014000 	.word	0x40014000
 8003344:	40014400 	.word	0x40014400
 8003348:	40014800 	.word	0x40014800

0800334c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2201      	movs	r2, #1
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1a      	ldr	r2, [r3, #32]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	43db      	mvns	r3, r3
 800336e:	401a      	ands	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1a      	ldr	r2, [r3, #32]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 031f 	and.w	r3, r3, #31
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	621a      	str	r2, [r3, #32]
}
 800338a:	bf00      	nop
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
	...

08003398 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d101      	bne.n	80033b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e054      	b.n	800345a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a17      	ldr	r2, [pc, #92]	; (8003468 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d009      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a11      	ldr	r2, [pc, #68]	; (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10c      	bne.n	8003448 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4313      	orrs	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40012c00 	.word	0x40012c00
 800346c:	40000400 	.word	0x40000400
 8003470:	40014000 	.word	0x40014000

08003474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e040      	b.n	8003544 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fb22 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f8c0 	bl	8003674 <UART_SetConfig>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d101      	bne.n	80034fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e022      	b.n	8003544 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f9ec 	bl	80038e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800351a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800352a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0201 	orr.w	r2, r2, #1
 800353a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fa73 	bl	8003a28 <UART_CheckIdleState>
 8003542:	4603      	mov	r3, r0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3708      	adds	r7, #8
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	603b      	str	r3, [r7, #0]
 8003558:	4613      	mov	r3, r2
 800355a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003560:	2b20      	cmp	r3, #32
 8003562:	f040 8082 	bne.w	800366a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d002      	beq.n	8003572 <HAL_UART_Transmit+0x26>
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e07a      	b.n	800366c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_UART_Transmit+0x38>
 8003580:	2302      	movs	r3, #2
 8003582:	e073      	b.n	800366c <HAL_UART_Transmit+0x120>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2221      	movs	r2, #33	; 0x21
 8003598:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800359a:	f7fd fddf 	bl	800115c <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	88fa      	ldrh	r2, [r7, #6]
 80035a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b8:	d108      	bne.n	80035cc <HAL_UART_Transmit+0x80>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	e003      	b.n	80035d4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80035dc:	e02d      	b.n	800363a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2180      	movs	r1, #128	; 0x80
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fa66 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e039      	b.n	800366c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10b      	bne.n	8003616 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	881a      	ldrh	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800360a:	b292      	uxth	r2, r2
 800360c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	3302      	adds	r3, #2
 8003612:	61bb      	str	r3, [r7, #24]
 8003614:	e008      	b.n	8003628 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	b292      	uxth	r2, r2
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3301      	adds	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003640:	b29b      	uxth	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1cb      	bne.n	80035de <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	2140      	movs	r1, #64	; 0x40
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 fa32 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e005      	b.n	800366c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	e000      	b.n	800366c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800366a:	2302      	movs	r3, #2
  }
}
 800366c:	4618      	mov	r0, r3
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <UART_SetConfig+0x258>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6812      	ldr	r2, [r2, #0]
 80036a6:	6979      	ldr	r1, [r7, #20]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a79      	ldr	r2, [pc, #484]	; (80038d0 <UART_SetConfig+0x25c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d121      	bne.n	8003734 <UART_SetConfig+0xc0>
 80036f0:	4b78      	ldr	r3, [pc, #480]	; (80038d4 <UART_SetConfig+0x260>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d817      	bhi.n	800372c <UART_SetConfig+0xb8>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0x90>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	08003721 	.word	0x08003721
 800370c:	08003727 	.word	0x08003727
 8003710:	0800371b 	.word	0x0800371b
 8003714:	2300      	movs	r3, #0
 8003716:	77fb      	strb	r3, [r7, #31]
 8003718:	e01e      	b.n	8003758 <UART_SetConfig+0xe4>
 800371a:	2302      	movs	r3, #2
 800371c:	77fb      	strb	r3, [r7, #31]
 800371e:	e01b      	b.n	8003758 <UART_SetConfig+0xe4>
 8003720:	2304      	movs	r3, #4
 8003722:	77fb      	strb	r3, [r7, #31]
 8003724:	e018      	b.n	8003758 <UART_SetConfig+0xe4>
 8003726:	2308      	movs	r3, #8
 8003728:	77fb      	strb	r3, [r7, #31]
 800372a:	e015      	b.n	8003758 <UART_SetConfig+0xe4>
 800372c:	2310      	movs	r3, #16
 800372e:	77fb      	strb	r3, [r7, #31]
 8003730:	bf00      	nop
 8003732:	e011      	b.n	8003758 <UART_SetConfig+0xe4>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a67      	ldr	r2, [pc, #412]	; (80038d8 <UART_SetConfig+0x264>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d102      	bne.n	8003744 <UART_SetConfig+0xd0>
 800373e:	2300      	movs	r3, #0
 8003740:	77fb      	strb	r3, [r7, #31]
 8003742:	e009      	b.n	8003758 <UART_SetConfig+0xe4>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a64      	ldr	r2, [pc, #400]	; (80038dc <UART_SetConfig+0x268>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d102      	bne.n	8003754 <UART_SetConfig+0xe0>
 800374e:	2300      	movs	r3, #0
 8003750:	77fb      	strb	r3, [r7, #31]
 8003752:	e001      	b.n	8003758 <UART_SetConfig+0xe4>
 8003754:	2310      	movs	r3, #16
 8003756:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003760:	d15c      	bne.n	800381c <UART_SetConfig+0x1a8>
  {
    switch (clocksource)
 8003762:	7ffb      	ldrb	r3, [r7, #31]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d828      	bhi.n	80037ba <UART_SetConfig+0x146>
 8003768:	a201      	add	r2, pc, #4	; (adr r2, 8003770 <UART_SetConfig+0xfc>)
 800376a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376e:	bf00      	nop
 8003770:	08003795 	.word	0x08003795
 8003774:	0800379d 	.word	0x0800379d
 8003778:	080037a5 	.word	0x080037a5
 800377c:	080037bb 	.word	0x080037bb
 8003780:	080037ab 	.word	0x080037ab
 8003784:	080037bb 	.word	0x080037bb
 8003788:	080037bb 	.word	0x080037bb
 800378c:	080037bb 	.word	0x080037bb
 8003790:	080037b3 	.word	0x080037b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003794:	f7ff f8c0 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003798:	61b8      	str	r0, [r7, #24]
        break;
 800379a:	e013      	b.n	80037c4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800379c:	f7ff f8de 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 80037a0:	61b8      	str	r0, [r7, #24]
        break;
 80037a2:	e00f      	b.n	80037c4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a4:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <UART_SetConfig+0x26c>)
 80037a6:	61bb      	str	r3, [r7, #24]
        break;
 80037a8:	e00c      	b.n	80037c4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037aa:	f7ff f83f 	bl	800282c <HAL_RCC_GetSysClockFreq>
 80037ae:	61b8      	str	r0, [r7, #24]
        break;
 80037b0:	e008      	b.n	80037c4 <UART_SetConfig+0x150>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e004      	b.n	80037c4 <UART_SetConfig+0x150>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	77bb      	strb	r3, [r7, #30]
        break;
 80037c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d074      	beq.n	80038b4 <UART_SetConfig+0x240>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	005a      	lsls	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	441a      	add	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	fbb2 f3f3 	udiv	r3, r2, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	2b0f      	cmp	r3, #15
 80037e6:	d916      	bls.n	8003816 <UART_SetConfig+0x1a2>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ee:	d212      	bcs.n	8003816 <UART_SetConfig+0x1a2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f023 030f 	bic.w	r3, r3, #15
 80037f8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	085b      	lsrs	r3, r3, #1
 80037fe:	b29b      	uxth	r3, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	b29a      	uxth	r2, r3
 8003806:	89fb      	ldrh	r3, [r7, #14]
 8003808:	4313      	orrs	r3, r2
 800380a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	89fa      	ldrh	r2, [r7, #14]
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e04e      	b.n	80038b4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	77bb      	strb	r3, [r7, #30]
 800381a:	e04b      	b.n	80038b4 <UART_SetConfig+0x240>
      }
    }
  }
  else
  {
    switch (clocksource)
 800381c:	7ffb      	ldrb	r3, [r7, #31]
 800381e:	2b08      	cmp	r3, #8
 8003820:	d827      	bhi.n	8003872 <UART_SetConfig+0x1fe>
 8003822:	a201      	add	r2, pc, #4	; (adr r2, 8003828 <UART_SetConfig+0x1b4>)
 8003824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003828:	0800384d 	.word	0x0800384d
 800382c:	08003855 	.word	0x08003855
 8003830:	0800385d 	.word	0x0800385d
 8003834:	08003873 	.word	0x08003873
 8003838:	08003863 	.word	0x08003863
 800383c:	08003873 	.word	0x08003873
 8003840:	08003873 	.word	0x08003873
 8003844:	08003873 	.word	0x08003873
 8003848:	0800386b 	.word	0x0800386b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800384c:	f7ff f864 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
 8003850:	61b8      	str	r0, [r7, #24]
        break;
 8003852:	e013      	b.n	800387c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003854:	f7ff f882 	bl	800295c <HAL_RCC_GetPCLK2Freq>
 8003858:	61b8      	str	r0, [r7, #24]
        break;
 800385a:	e00f      	b.n	800387c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <UART_SetConfig+0x26c>)
 800385e:	61bb      	str	r3, [r7, #24]
        break;
 8003860:	e00c      	b.n	800387c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003862:	f7fe ffe3 	bl	800282c <HAL_RCC_GetSysClockFreq>
 8003866:	61b8      	str	r0, [r7, #24]
        break;
 8003868:	e008      	b.n	800387c <UART_SetConfig+0x208>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800386a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800386e:	61bb      	str	r3, [r7, #24]
        break;
 8003870:	e004      	b.n	800387c <UART_SetConfig+0x208>
      default:
        pclk = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	77bb      	strb	r3, [r7, #30]
        break;
 800387a:	bf00      	nop
    }

    if (pclk != 0U)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d018      	beq.n	80038b4 <UART_SetConfig+0x240>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085a      	lsrs	r2, r3, #1
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	441a      	add	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	b29b      	uxth	r3, r3
 8003896:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d908      	bls.n	80038b0 <UART_SetConfig+0x23c>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a4:	d204      	bcs.n	80038b0 <UART_SetConfig+0x23c>
      {
        huart->Instance->BRR = usartdiv;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	60da      	str	r2, [r3, #12]
 80038ae:	e001      	b.n	80038b4 <UART_SetConfig+0x240>
      }
      else
      {
        ret = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	efff69f3 	.word	0xefff69f3
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40021000 	.word	0x40021000
 80038d8:	40004400 	.word	0x40004400
 80038dc:	40004800 	.word	0x40004800
 80038e0:	007a1200 	.word	0x007a1200

080038e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003978:	f003 0310 	and.w	r3, r3, #16
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00a      	beq.n	8003996 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00a      	beq.n	80039b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01a      	beq.n	80039fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e2:	d10a      	bne.n	80039fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a38:	f7fd fb90 	bl	800115c <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d10e      	bne.n	8003a6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f82d 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e023      	b.n	8003ab2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	d10e      	bne.n	8003a96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f817 	bl	8003aba <UART_WaitOnFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e00d      	b.n	8003ab2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	60f8      	str	r0, [r7, #12]
 8003ac2:	60b9      	str	r1, [r7, #8]
 8003ac4:	603b      	str	r3, [r7, #0]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aca:	e05e      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d05a      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad4:	f7fd fb42 	bl	800115c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d302      	bcc.n	8003aea <UART_WaitOnFlagUntilTimeout+0x30>
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d11b      	bne.n	8003b22 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0201 	bic.w	r2, r2, #1
 8003b08:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e043      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02c      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3e:	d124      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2220      	movs	r2, #32
 8003b74:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d091      	beq.n	8003acc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
	...

08003bb4 <__libc_init_array>:
 8003bb4:	b570      	push	{r4, r5, r6, lr}
 8003bb6:	4e0d      	ldr	r6, [pc, #52]	; (8003bec <__libc_init_array+0x38>)
 8003bb8:	4c0d      	ldr	r4, [pc, #52]	; (8003bf0 <__libc_init_array+0x3c>)
 8003bba:	1ba4      	subs	r4, r4, r6
 8003bbc:	10a4      	asrs	r4, r4, #2
 8003bbe:	2500      	movs	r5, #0
 8003bc0:	42a5      	cmp	r5, r4
 8003bc2:	d109      	bne.n	8003bd8 <__libc_init_array+0x24>
 8003bc4:	4e0b      	ldr	r6, [pc, #44]	; (8003bf4 <__libc_init_array+0x40>)
 8003bc6:	4c0c      	ldr	r4, [pc, #48]	; (8003bf8 <__libc_init_array+0x44>)
 8003bc8:	f000 f820 	bl	8003c0c <_init>
 8003bcc:	1ba4      	subs	r4, r4, r6
 8003bce:	10a4      	asrs	r4, r4, #2
 8003bd0:	2500      	movs	r5, #0
 8003bd2:	42a5      	cmp	r5, r4
 8003bd4:	d105      	bne.n	8003be2 <__libc_init_array+0x2e>
 8003bd6:	bd70      	pop	{r4, r5, r6, pc}
 8003bd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bdc:	4798      	blx	r3
 8003bde:	3501      	adds	r5, #1
 8003be0:	e7ee      	b.n	8003bc0 <__libc_init_array+0xc>
 8003be2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be6:	4798      	blx	r3
 8003be8:	3501      	adds	r5, #1
 8003bea:	e7f2      	b.n	8003bd2 <__libc_init_array+0x1e>
 8003bec:	08003c6c 	.word	0x08003c6c
 8003bf0:	08003c6c 	.word	0x08003c6c
 8003bf4:	08003c6c 	.word	0x08003c6c
 8003bf8:	08003c70 	.word	0x08003c70

08003bfc <memset>:
 8003bfc:	4402      	add	r2, r0
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d100      	bne.n	8003c06 <memset+0xa>
 8003c04:	4770      	bx	lr
 8003c06:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0a:	e7f9      	b.n	8003c00 <memset+0x4>

08003c0c <_init>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr

08003c18 <_fini>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr
